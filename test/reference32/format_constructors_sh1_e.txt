@fiber(sh{1}(e(0)) constructors:
initialized fiber: Fiber(SparseHash{1, Tuple{Int32}, Int32}((6,), Dict{Tuple{Int32, Tuple{Int32}}, Int32}((1, (2,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, (1, (6,)) => 4), [1, 5], [(1, (2,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, (1, (6,)) => 4], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
initialized fiber: Fiber(SparseHash{1, Tuple{Int16}, Int32}((6,), Dict{Tuple{Int32, Tuple{Int16}}, Int32}((1, (2,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, (1, (6,)) => 4), [1, 5], [(1, (2,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, (1, (6,)) => 4], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])))
sized fiber: Fiber(SparseHash{1, Tuple{Int32}, Int32}((7,), Dict{Tuple{Int32, Tuple{Int32}}, Int32}(), [1, 1], [], Element{0.0, Float64}([])))
sized fiber: Fiber(SparseHash{1, Tuple{Int16}, Int32}((7,), Dict{Tuple{Int32, Tuple{Int16}}, Int32}(), [1, 1], [], Element{0.0, Float64}([])))
empty fiber: Fiber(SparseHash{1, Tuple{Int32}, Int32}((0,), Dict{Tuple{Int32, Tuple{Int32}}, Int32}(), [1, 1], [], Element{0.0, Float64}([])))
empty fiber: Fiber(SparseHash{1, Tuple{Int16}, Int32}((0,), Dict{Tuple{Int32, Tuple{Int16}}, Int32}(), [1, 1], [], Element{0.0, Float64}([])))

