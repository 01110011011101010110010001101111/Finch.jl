@fiber(sh{2}(e(0)) constructors:
initialized fiber: Fiber(SparseHash{2, Tuple{Int32, Int32}, Int32}(Element{0.0, Float64}([1.0, 2.0, 2.0, 7.0, 1.0, 3.0, 3.0, 9.0]), (3, 6), Dict{Tuple{Int32, Tuple{Int32, Int32}}, Int32}((1, (1, 2)) => 1, (1, (2, 1)) => 2, (1, (3, 1)) => 3, (1, (3, 2)) => 4, (1, (4, 2)) => 5, (1, (5, 1)) => 6, (1, (6, 1)) => 7, (1, (6, 3)) => 8), [1, 9], [(1, (1, 2)) => 1, (1, (2, 1)) => 2, (1, (3, 1)) => 3, (1, (3, 2)) => 4, (1, (4, 2)) => 5, (1, (5, 1)) => 6, (1, (6, 1)) => 7, (1, (6, 3)) => 8]))
initialized fiber: Fiber(SparseHash{2, Tuple{Int16, Int16}, Int32}(Element{0.0, Float64}([1.0, 2.0, 2.0, 7.0, 1.0, 3.0, 3.0, 9.0]), (3, 6), Dict{Tuple{Int32, Tuple{Int16, Int16}}, Int32}((1, (1, 2)) => 1, (1, (2, 1)) => 2, (1, (3, 1)) => 3, (1, (3, 2)) => 4, (1, (4, 2)) => 5, (1, (5, 1)) => 6, (1, (6, 1)) => 7, (1, (6, 3)) => 8), [1, 9], [(1, (1, 2)) => 1, (1, (2, 1)) => 2, (1, (3, 1)) => 3, (1, (3, 2)) => 4, (1, (4, 2)) => 5, (1, (5, 1)) => 6, (1, (6, 1)) => 7, (1, (6, 3)) => 8]))
sized fiber: Fiber(SparseHash{2, Tuple{Int32, Int32}, Int32}(Element{0.0, Float64}([]), (3, 7), Dict{Tuple{Int32, Tuple{Int32, Int32}}, Int32}(), [1, 1], []))
sized fiber: Fiber(SparseHash{2, Tuple{Int16, Int16}, Int32}(Element{0.0, Float64}([]), (3, 7), Dict{Tuple{Int32, Tuple{Int16, Int16}}, Int32}(), [1, 1], []))
empty fiber: Fiber(SparseHash{2, Tuple{Int32, Int32}, Int32}(Element{0.0, Float64}([]), (0, 0), Dict{Tuple{Int32, Tuple{Int32, Int32}}, Int32}(), [1, 1], []))
empty fiber: Fiber(SparseHash{2, Tuple{Int16, Int16}, Int32}(Element{0.0, Float64}([]), (0, 0), Dict{Tuple{Int32, Tuple{Int16, Int16}}, Int32}(), [1, 1], []))

