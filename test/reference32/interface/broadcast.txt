broadcast tests
julia> A = Tensor(Dense(SparseList(Element(0.0))), [0.0 0.0 4.4; 1.1 0.0 0.0; 2.2 0.0 5.5; 3.3 0.0 0.0])
Dense [:,1:3]
├─ [:, 1]: SparseList (0.0) [1:4]
│  ├─ [2]: 1.1
│  ├─ [3]: 2.2
│  └─ [4]: 3.3
├─ [:, 2]: SparseList (0.0) [1:4]
└─ [:, 3]: SparseList (0.0) [1:4]
   ├─ [1]: 4.4
   └─ [3]: 5.5

julia> B = [1, 2, 3, 4]
4-element Vector{Int32}:
 1
 2
 3
 4
julia> C = A .+ B

julia> AsArray(C)
4×3 Finch.SwizzleArray{(1, 2), Tensor{DenseLevel{Int32, DenseLevel{Int32, ElementLevel{0.0, Float64, Int32, Vector{Float64}}}}}}:
 1.0  1.0  5.4
 3.1  2.0  2.0
 5.2  3.0  8.5
 7.3  4.0  4.0
julia> D = A .* B

julia> AsArray(D)
4×3 Finch.SwizzleArray{(1, 2), Tensor{DenseLevel{Int32, SparseLevel{Int32, Finch.DictTable{Int32, Int32, Vector{Int32}, Vector{Int32}, Vector{Int32}, Dict{Tuple{Int32, Int32}, Int32}}, ElementLevel{0.0, Float64, Int32, Vector{Float64}}}}}}:
  0.0  0.0   4.4
  2.2  0.0   0.0
  6.6  0.0  16.5
 13.2  0.0   0.0
julia> E = ifelse.(A .== 0, 1, 2)
SwizzleArray(Tensor(Dense{Int32}(Dense{Int32}(Element{1, Int32, Int32}([1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1]), 4), 3)), (1, 2))
julia> AsArray(E)
4×3 Finch.SwizzleArray{(1, 2), Tensor{DenseLevel{Int32, DenseLevel{Int32, ElementLevel{1, Int32, Int32, Vector{Int32}}}}}}:
 1  1  2
 2  1  1
 2  1  2
 2  1  1

