reduce tests
julia> A = Tensor(Dense(SparseList(Element(0.0))), [0.0 0.0 4.4; 1.1 0.0 0.0; 2.2 0.0 5.5; 3.3 0.0 0.0])
Dense [:,1:3]
├─ [:, 1]: SparseList (0.0) [1:4]
│  ├─ [2]: 1.1
│  ├─ [3]: 2.2
│  └─ [4]: 3.3
├─ [:, 2]: SparseList (0.0) [1:4]
└─ [:, 3]: SparseList (0.0) [1:4]
   ├─ [1]: 4.4
   └─ [3]: 5.5

julia> reduce(+, A, dims = (1,))
SwizzleArray(Tensor(Dense{Int32}(Element{0.0, Float64, Int32}([6.6, 0.0, 9.9]), 3)), (1,))
julia> reduce(+, A, dims = 1)
SwizzleArray(Tensor(Dense{Int32}(Element{0.0, Float64, Int32}([6.6, 0.0, 9.9]), 3)), (1,))
julia> reduce(+, A, dims = (2,))
SwizzleArray(Tensor(Sparse{Int32}(Element{0.0, Float64, Int32}([1.1, 7.7, 3.3, 4.4]), 4, Finch.DictTable{Int32, Int32, Vector{Int32}, Vector{Int32}, Vector{Int32}, Dict{Tuple{Int32, Int32}, Int32}}([1, 5], [1, 2, 3, 4], [4, 1, 2, 3], Dict((1, 2) => 1, (1, 4) => 3, (1, 3) => 2, (1, 1) => 4)))), (1,))
julia> reduce(+, A, dims = 2)
SwizzleArray(Tensor(Sparse{Int32}(Element{0.0, Float64, Int32}([1.1, 7.7, 3.3, 4.4]), 4, Finch.DictTable{Int32, Int32, Vector{Int32}, Vector{Int32}, Vector{Int32}, Dict{Tuple{Int32, Int32}, Int32}}([1, 5], [1, 2, 3, 4], [4, 1, 2, 3], Dict((1, 2) => 1, (1, 4) => 3, (1, 3) => 2, (1, 1) => 4)))), (1,))
julia> reduce(+, A, dims = (1, 2))
SwizzleArray(Tensor(Element{0.0, Float64, Int32}([16.5])), ())
julia> reduce(+, A, dims = (:))
16.5

