broadcast tests
julia> A = @fiber(d(sl(e(0.0))), [0.0 0.0 4.4; 1.1 0.0 0.0; 2.2 0.0 5.5; 3.3 0.0 0.0])
Dense [:,1:3]
├─[:,1]: SparseList (0.0) [1:4]
│ ├─[2]: 1.1
│ ├─[3]: 2.2
│ ├─[4]: 3.3
├─[:,2]: SparseList (0.0) [1:4]
├─[:,3]: SparseList (0.0) [1:4]
│ ├─[1]: 4.4
│ ├─[3]: 5.5
julia> B = [1, 2, 3, 4]
4-element Vector{Int64}:
 1
 2
 3
 4
julia> begin
    C = A .+ B
end
Dense [:,1:3]
├─[:,1]: Dense [1:4]
│ ├─[1]: 1.0
│ ├─[2]: 3.1
│ ├─[3]: 5.2
│ ├─[4]: 7.3
├─[:,2]: Dense [1:4]
│ ├─[1]: 1.0
│ ├─[2]: 2.0
│ ├─[3]: 3.0
│ ├─[4]: 4.0
├─[:,3]: Dense [1:4]
│ ├─[1]: 5.4
│ ├─[2]: 2.0
│ ├─[3]: 8.5
│ ├─[4]: 4.0
julia> AsArray(C)
4×3 AsArray{Float64, 2, Fiber{Finch.DenseLevel{Int64, Finch.DenseLevel{Int64, Finch.ElementLevel{0.0, Float64}}}}}:
 1.0  1.0  5.4
 3.1  2.0  2.0
 5.2  3.0  8.5
 7.3  4.0  4.0
julia> begin
    D = A .* B
end
Dense [:,1:3]
├─[:,1]: SparseList (0.0) [1:4]
│ ├─[2]: 2.2
│ ├─[3]: 6.6000000000000005
│ ├─[4]: 13.2
├─[:,2]: SparseList (0.0) [1:4]
├─[:,3]: SparseList (0.0) [1:4]
│ ├─[1]: 4.4
│ ├─[3]: 16.5
julia> AsArray(D)
4×3 AsArray{Float64, 2, Fiber{Finch.DenseLevel{Int64, Finch.SparseListLevel{Int64, Int64, Finch.ElementLevel{0.0, Float64}}}}}:
  0.0  0.0   4.4
  2.2  0.0   0.0
  6.6  0.0  16.5
 13.2  0.0   0.0

