julia> @finch_code begin
        z .= 0
        for i = _
            z[i] += x[i] * y[i]
        end
    end
quote
    z_lvl = (ex.bodies[1]).tns.tns.lvl
    z_lvl_2 = z_lvl.lvl
    x_lvl = ((ex.bodies[2]).body.rhs.args[1]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl = ((ex.bodies[2]).body.rhs.args[2]).tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    y_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(x_lvl.shape))"))
    z_lvl_qos_stop = 0
    Finch.resize_if_smaller!(z_lvl.ptr, 1 + 1)
    Finch.fill_range!(z_lvl.ptr, 0, 1 + 1, 1 + 1)
    z_lvl_qos = 0 + 1
    y_lvl_q = y_lvl.ptr[1]
    y_lvl_q_stop = y_lvl.ptr[1 + 1]
    if y_lvl_q < y_lvl_q_stop
        y_lvl_i_end = y_lvl.right[y_lvl_q_stop - 1]
    else
        y_lvl_i_end = 0.0f0
    end
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i_end = x_lvl.right[x_lvl_q_stop - 1]
    else
        x_lvl_i_end = 0.0f0
    end
    phase_stop = min(y_lvl.shape, y_lvl_i_end, x_lvl_i_end)
    if phase_stop >= limit(1.0tiny(0ϵ))
        i = limit(1.0tiny(0ϵ))
        if y_lvl.right[y_lvl_q] < limit(1.0tiny(0ϵ))
            y_lvl_q = Finch.scansearch(y_lvl.right, limit(1.0tiny(0ϵ)), y_lvl_q, y_lvl_q_stop - 1)
        end
        if x_lvl.right[x_lvl_q] < limit(1.0tiny(0ϵ))
            x_lvl_q = Finch.scansearch(x_lvl.right, limit(1.0tiny(0ϵ)), x_lvl_q, x_lvl_q_stop - 1)
        end
        while i <= phase_stop
            y_lvl_i_start = y_lvl.left[y_lvl_q]
            y_lvl_i_stop = y_lvl.right[y_lvl_q]
            x_lvl_i_start = x_lvl.left[x_lvl_q]
            x_lvl_i_stop = x_lvl.right[x_lvl_q]
            phase_start_2 = i
            phase_stop_2 = min(x_lvl_i_stop, phase_stop, y_lvl_i_stop)
            phase_start_6 = max(phase_start_2, y_lvl_i_start, x_lvl_i_start)
            if phase_stop_2 >= phase_start_6
                x_lvl_2_val_3 = x_lvl_2.val[x_lvl_q]
                y_lvl_2_val_3 = y_lvl_2.val[y_lvl_q]
                if z_lvl_qos > z_lvl_qos_stop
                    z_lvl_qos_stop = max(z_lvl_qos_stop << 1, 1)
                    Finch.resize_if_smaller!(z_lvl.left, z_lvl_qos_stop)
                    Finch.resize_if_smaller!(z_lvl.right, z_lvl_qos_stop)
                    Finch.resize_if_smaller!(z_lvl_2.val, z_lvl_qos_stop)
                    Finch.fill_range!(z_lvl_2.val, 0, z_lvl_qos, z_lvl_qos_stop)
                end
                z_lvl_2.val[z_lvl_qos] = z_lvl_2.val[z_lvl_qos] + y_lvl_2_val_3 * x_lvl_2_val_3
                z_lvl.left[z_lvl_qos] = phase_start_6
                z_lvl.right[z_lvl_qos] = phase_stop_2
                z_lvl_qos += 1
            end
            y_lvl_q += phase_stop_2 == y_lvl_i_stop
            x_lvl_q += phase_stop_2 == x_lvl_i_stop
            i = phase_stop_2 + limit(0tiny(1ϵ))
        end
    end
    z_lvl.ptr[1 + 1] = (z_lvl_qos - 0) - 1
    for p = 2:1 + 1
        z_lvl.ptr[p] += z_lvl.ptr[p - 1]
    end
    resize!(z_lvl.ptr, 1 + 1)
    qos = z_lvl.ptr[end] - 1
    resize!(z_lvl.left, qos)
    resize!(z_lvl.right, qos)
    resize!(z_lvl_2.val, qos)
    (z = Fiber((SparseRLELevel){Float32, Int64}(z_lvl_2, y_lvl.shape, z_lvl.ptr, z_lvl.left, z_lvl.right)),)
end
julia> @finch begin
        z .= 0
        for i = _
            z[i] += x[i] * y[i]
        end
    end
(z = Fiber(SparseRLE{Float32, Int64}(Element{0, Int64}([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 1000.0, [1, 114], [1.0, 9.0, 13.0, 26.0, 36.0, 43.0, 52.0, 53.0, 66.0, 89.0, 107.0, 128.0, 131.0, 134.0, 139.0, 159.0, 163.0, 165.0, 177.0, 189.0, 194.0, 204.0, 220.0, 223.0, 238.0, 241.0, 243.0, 254.0, 261.0, 271.0, 277.0, 290.0, 295.0, 321.0, 356.0, 370.0, 373.0, 378.0, 383.0, 384.0, 386.0, 396.0, 400.0, 405.0, 408.0, 412.0, 422.0, 444.0, 457.0, 473.0, 483.0, 495.0, 503.0, 515.0, 520.0, 528.0, 534.0, 539.0, 545.0, 550.0, 555.0, 560.0, 565.0, 566.0, 575.0, 579.0, 585.0, 593.0, 597.0, 608.0, 617.0, 623.0, 654.0, 659.0, 668.0, 671.0, 681.0, 683.0, 693.0, 699.0, 700.0, 713.0, 721.0, 729.0, 733.0, 736.0, 740.0, 743.0, 757.0, 766.0, 769.0, 779.0, 781.0, 797.0, 810.0, 811.0, 825.0, 834.0, 849.0, 861.0, 862.0, 870.0, 880.0, 898.0, 902.0, 911.0, 914.0, 929.0, 940.0, 946.0, 952.0, 954.0, 966.0], [5.0, 11.0, 13.0, 33.0, 41.0, 45.0, 52.0, 53.0, 70.0, 90.0, 108.0, 130.0, 131.0, 136.0, 141.0, 162.0, 164.0, 172.0, 180.0, 192.0, 200.0, 209.0, 221.0, 223.0, 239.0, 242.0, 244.0, 258.0, 263.0, 274.0, 277.0, 292.0, 295.0, 326.0, 361.0, 370.0, 375.0, 378.0, 383.0, 384.0, 386.0, 398.0, 402.0, 407.0, 409.0, 412.0, 443.0, 448.0, 457.0, 480.0, 490.0, 499.0, 506.0, 516.0, 520.0, 529.0, 535.0, 542.0, 546.0, 550.0, 556.0, 564.0, 565.0, 566.0, 576.0, 581.0, 586.0, 594.0, 602.0, 610.0, 621.0, 627.0, 656.0, 663.0, 670.0, 678.0, 682.0, 687.0, 697.0, 699.0, 701.0, 717.0, 725.0, 731.0, 734.0, 739.0, 740.0, 745.0, 762.0, 768.0, 776.0, 780.0, 781.0, 806.0, 810.0, 814.0, 828.0, 835.0, 852.0, 861.0, 866.0, 879.0, 883.0, 900.0, 903.0, 912.0, 914.0, 931.0, 942.0, 947.0, 952.0, 958.0, 970.0])),)

