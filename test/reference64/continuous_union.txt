julia> @finch_code begin
        z .= 0
        for i = _
            z[i] += x[i] + y[i]
        end
    end
quote
    z_lvl = (ex.bodies[1]).tns.tns.lvl
    z_lvl_2 = z_lvl.lvl
    x_lvl = ((ex.bodies[2]).body.rhs.args[1]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl = ((ex.bodies[2]).body.rhs.args[2]).tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    y_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(x_lvl.shape))"))
    z_lvl_qos_stop = 0
    Finch.resize_if_smaller!(z_lvl.ptr, 1 + 1)
    Finch.fill_range!(z_lvl.ptr, 0, 1 + 1, 1 + 1)
    z_lvl_qos = 0 + 1
    y_lvl_q = y_lvl.ptr[1]
    y_lvl_q_stop = y_lvl.ptr[1 + 1]
    if y_lvl_q < y_lvl_q_stop
        y_lvl_i_end = y_lvl.right[y_lvl_q_stop - 1]
    else
        y_lvl_i_end = 0.0f0
    end
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i_end = x_lvl.right[x_lvl_q_stop - 1]
    else
        x_lvl_i_end = 0.0f0
    end
    phase_stop = min(y_lvl.shape, y_lvl_i_end, x_lvl_i_end)
    if phase_stop >= limit(1.0tiny(0ϵ))
        i = limit(1.0tiny(0ϵ))
        if y_lvl.right[y_lvl_q] < limit(1.0tiny(0ϵ))
            y_lvl_q = Finch.scansearch(y_lvl.right, limit(1.0tiny(0ϵ)), y_lvl_q, y_lvl_q_stop - 1)
        end
        if x_lvl.right[x_lvl_q] < limit(1.0tiny(0ϵ))
            x_lvl_q = Finch.scansearch(x_lvl.right, limit(1.0tiny(0ϵ)), x_lvl_q, x_lvl_q_stop - 1)
        end
        while i <= phase_stop
            y_lvl_i_start = y_lvl.left[y_lvl_q]
            y_lvl_i_stop = y_lvl.right[y_lvl_q]
            x_lvl_i_start = x_lvl.left[x_lvl_q]
            x_lvl_i_stop = x_lvl.right[x_lvl_q]
            phase_start_2 = i
            phase_stop_2 = min(x_lvl_i_stop, phase_stop, y_lvl_i_stop)
            phase_start_4 = max(phase_start_2, y_lvl_i_start)
            phase_stop_4 = min(phase_stop_2, limit(0tiny(-1ϵ)) + x_lvl_i_start)
            if phase_stop_4 >= phase_start_4
                y_lvl_2_val_2 = y_lvl_2.val[y_lvl_q]
                if z_lvl_qos > z_lvl_qos_stop
                    z_lvl_qos_stop = max(z_lvl_qos_stop << 1, 1)
                    Finch.resize_if_smaller!(z_lvl.left, z_lvl_qos_stop)
                    Finch.resize_if_smaller!(z_lvl.right, z_lvl_qos_stop)
                    Finch.resize_if_smaller!(z_lvl_2.val, z_lvl_qos_stop)
                    Finch.fill_range!(z_lvl_2.val, 0, z_lvl_qos, z_lvl_qos_stop)
                end
                z_lvl_2.val[z_lvl_qos] = y_lvl_2_val_2 + z_lvl_2.val[z_lvl_qos]
                z_lvl.left[z_lvl_qos] = phase_start_4
                z_lvl.right[z_lvl_qos] = phase_stop_4
                z_lvl_qos += 1
            end
            phase_start_5 = max(phase_start_2, x_lvl_i_start)
            phase_stop_5 = min(phase_stop_2, limit(0tiny(-1ϵ)) + y_lvl_i_start)
            if phase_stop_5 >= phase_start_5
                x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                if z_lvl_qos > z_lvl_qos_stop
                    z_lvl_qos_stop = max(z_lvl_qos_stop << 1, 1)
                    Finch.resize_if_smaller!(z_lvl.left, z_lvl_qos_stop)
                    Finch.resize_if_smaller!(z_lvl.right, z_lvl_qos_stop)
                    Finch.resize_if_smaller!(z_lvl_2.val, z_lvl_qos_stop)
                    Finch.fill_range!(z_lvl_2.val, 0, z_lvl_qos, z_lvl_qos_stop)
                end
                z_lvl_2.val[z_lvl_qos] = x_lvl_2_val_2 + z_lvl_2.val[z_lvl_qos]
                z_lvl.left[z_lvl_qos] = phase_start_5
                z_lvl.right[z_lvl_qos] = phase_stop_5
                z_lvl_qos += 1
            end
            phase_start_6 = max(phase_start_2, y_lvl_i_start, x_lvl_i_start)
            if phase_stop_2 >= phase_start_6
                x_lvl_2_val_3 = x_lvl_2.val[x_lvl_q]
                y_lvl_2_val_3 = y_lvl_2.val[y_lvl_q]
                if z_lvl_qos > z_lvl_qos_stop
                    z_lvl_qos_stop = max(z_lvl_qos_stop << 1, 1)
                    Finch.resize_if_smaller!(z_lvl.left, z_lvl_qos_stop)
                    Finch.resize_if_smaller!(z_lvl.right, z_lvl_qos_stop)
                    Finch.resize_if_smaller!(z_lvl_2.val, z_lvl_qos_stop)
                    Finch.fill_range!(z_lvl_2.val, 0, z_lvl_qos, z_lvl_qos_stop)
                end
                z_lvl_2.val[z_lvl_qos] = x_lvl_2_val_3 + z_lvl_2.val[z_lvl_qos] + y_lvl_2_val_3
                z_lvl.left[z_lvl_qos] = phase_start_6
                z_lvl.right[z_lvl_qos] = phase_stop_2
                z_lvl_qos += 1
            end
            y_lvl_q += phase_stop_2 == y_lvl_i_stop
            x_lvl_q += phase_stop_2 == x_lvl_i_stop
            i = phase_stop_2 + limit(0tiny(1ϵ))
        end
    end
    phase_start_7 = max(limit(1.0tiny(0ϵ)), limit(0tiny(1ϵ)) + y_lvl_i_end)
    phase_stop_7 = min(y_lvl.shape, x_lvl_i_end)
    if phase_stop_7 >= phase_start_7
        i = phase_start_7
        if x_lvl.right[x_lvl_q] < phase_start_7
            x_lvl_q = Finch.scansearch(x_lvl.right, phase_start_7, x_lvl_q, x_lvl_q_stop - 1)
        end
        while i <= phase_stop_7
            x_lvl_i_start = x_lvl.left[x_lvl_q]
            x_lvl_i_stop = x_lvl.right[x_lvl_q]
            phase_start_8 = i
            phase_stop_8 = min(x_lvl_i_stop, phase_stop_7)
            if phase_stop_8 >= i
                phase_start_10 = max(x_lvl_i_start, phase_start_8)
                if phase_stop_8 >= phase_start_10
                    x_lvl_2_val_4 = x_lvl_2.val[x_lvl_q]
                    if z_lvl_qos > z_lvl_qos_stop
                        z_lvl_qos_stop = max(z_lvl_qos_stop << 1, 1)
                        Finch.resize_if_smaller!(z_lvl.left, z_lvl_qos_stop)
                        Finch.resize_if_smaller!(z_lvl.right, z_lvl_qos_stop)
                        Finch.resize_if_smaller!(z_lvl_2.val, z_lvl_qos_stop)
                        Finch.fill_range!(z_lvl_2.val, 0, z_lvl_qos, z_lvl_qos_stop)
                    end
                    z_lvl_2.val[z_lvl_qos] = x_lvl_2_val_4 + z_lvl_2.val[z_lvl_qos]
                    z_lvl.left[z_lvl_qos] = phase_start_10
                    z_lvl.right[z_lvl_qos] = phase_stop_8
                    z_lvl_qos += 1
                end
                x_lvl_q += phase_stop_8 == x_lvl_i_stop
                i = phase_stop_8 + limit(0tiny(1ϵ))
            end
        end
    end
    phase_start_11 = max(limit(1.0tiny(0ϵ)), limit(0tiny(1ϵ)) + x_lvl_i_end)
    phase_stop_11 = min(y_lvl.shape, y_lvl_i_end)
    if phase_stop_11 >= phase_start_11
        i = phase_start_11
        if y_lvl.right[y_lvl_q] < phase_start_11
            y_lvl_q = Finch.scansearch(y_lvl.right, phase_start_11, y_lvl_q, y_lvl_q_stop - 1)
        end
        while i <= phase_stop_11
            y_lvl_i_start = y_lvl.left[y_lvl_q]
            y_lvl_i_stop = y_lvl.right[y_lvl_q]
            phase_start_12 = i
            phase_stop_12 = min(y_lvl_i_stop, phase_stop_11)
            if phase_stop_12 >= i
                phase_start_14 = max(y_lvl_i_start, phase_start_12)
                if phase_stop_12 >= phase_start_14
                    y_lvl_2_val_4 = y_lvl_2.val[y_lvl_q]
                    if z_lvl_qos > z_lvl_qos_stop
                        z_lvl_qos_stop = max(z_lvl_qos_stop << 1, 1)
                        Finch.resize_if_smaller!(z_lvl.left, z_lvl_qos_stop)
                        Finch.resize_if_smaller!(z_lvl.right, z_lvl_qos_stop)
                        Finch.resize_if_smaller!(z_lvl_2.val, z_lvl_qos_stop)
                        Finch.fill_range!(z_lvl_2.val, 0, z_lvl_qos, z_lvl_qos_stop)
                    end
                    z_lvl_2.val[z_lvl_qos] = y_lvl_2_val_4 + z_lvl_2.val[z_lvl_qos]
                    z_lvl.left[z_lvl_qos] = phase_start_14
                    z_lvl.right[z_lvl_qos] = phase_stop_12
                    z_lvl_qos += 1
                end
                y_lvl_q += phase_stop_12 == y_lvl_i_stop
                i = phase_stop_12 + limit(0tiny(1ϵ))
            end
        end
    end
    z_lvl.ptr[1 + 1] = (z_lvl_qos - 0) - 1
    for p = 2:1 + 1
        z_lvl.ptr[p] += z_lvl.ptr[p - 1]
    end
    resize!(z_lvl.ptr, 1 + 1)
    qos = z_lvl.ptr[end] - 1
    resize!(z_lvl.left, qos)
    resize!(z_lvl.right, qos)
    resize!(z_lvl_2.val, qos)
    (z = Fiber((SparseRLELevel){Float32, Int64}(z_lvl_2, y_lvl.shape, z_lvl.ptr, z_lvl.left, z_lvl.right)),)
end
julia> @finch begin
        z .= 0
        for i = _
            z[i] += x[i] + y[i]
        end
    end
(z = Fiber(SparseRLE{Float32, Int64}(Element{0, Int64}

