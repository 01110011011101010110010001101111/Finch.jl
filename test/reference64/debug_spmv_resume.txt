Any[quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape::Int64 == A_lvl_2.shape::Int64 || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape::Int64) != $(A_lvl_2.shape::Int64))"))
    A_lvl.shape::Int64 == x_lvl.shape::Int64 || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape::Int64) != $(x_lvl.shape::Int64))"))
          begin
        @thaw(y)        @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
          y[i] <<+>>= *(x[j], A[i, j])        )        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape::Int64 || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape::Int64) != $(A_lvl_2.shape::Int64))"))
    A_lvl.shape::Int64 == x_lvl.shape::Int64 || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape::Int64) != $(x_lvl.shape::Int64))"))
          begin
        @thaw(y)        @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
          y[i] <<+>>= *(x[j], A[i, j])        )        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape::Int64) != $(A_lvl_2.shape::Int64))"))
    A_lvl.shape::Int64 == x_lvl.shape::Int64 || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape::Int64) != $(x_lvl.shape::Int64))"))
          begin
        @thaw(y)        @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
          y[i] <<+>>= *(x[j], A[i, j])        )        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape::Int64))"))
    A_lvl.shape::Int64 == x_lvl.shape::Int64 || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape::Int64) != $(x_lvl.shape::Int64))"))
          begin
        @thaw(y)        @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
          y[i] <<+>>= *(x[j], A[i, j])        )        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape::Int64 == x_lvl.shape::Int64 || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape::Int64) != $(x_lvl.shape::Int64))"))
          begin
        @thaw(y)        @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
          y[i] <<+>>= *(x[j], A[i, j])        )        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape::Int64 || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape::Int64) != $(x_lvl.shape::Int64))"))
          begin
        @thaw(y)        @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
          y[i] <<+>>= *(x[j], A[i, j])        )        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape::Int64) != $(x_lvl.shape::Int64))"))
          begin
        @thaw(y)        @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
          y[i] <<+>>= *(x[j], A[i, j])        )        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape::Int64))"))
          begin
        @thaw(y)        @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
          y[i] <<+>>= *(x[j], A[i, j])        )        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
          begin
        @thaw(y)        @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
          y[i] <<+>>= *(x[j], A[i, j])        )        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
          @thaw(y)
          begin
        @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
          y[i] <<+>>= *(x[j], A[i, j])        )        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
          begin
        @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
          y[i] <<+>>= *(x[j], A[i, j])        )        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
        virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Furlable)[j], virtual(Finch.Furlable)[i, j])      )
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
        virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Thunk)[j], virtual(Finch.Lookup)[i, j])      )
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res =           @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
            virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Pipeline)[j], virtual(Finch.Lookup)[i, j])          )
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res =           @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
            virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Pipeline)[j], virtual(Finch.Lookup)[i, j])          )
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res =           @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
            virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Pipeline)[j], virtual(Finch.Lookup)[i, j])          )
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Stepper)[j], virtual(Finch.Lookup)[i, j])                  )
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Stepper)[j], virtual(Finch.Lookup)[i, j])                  )
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Stepper)[j], virtual(Finch.Lookup)[i, j])                  )
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Stepper)[j], virtual(Finch.Lookup)[i, j])                  )
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Stepper)[j], virtual(Finch.Lookup)[i, j])                  )
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                        virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Thunk)[j], virtual(Finch.Lookup)[i, j])                      )
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                        virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Thunk)[j], virtual(Finch.Lookup)[i, j])                      )
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                        virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Thunk)[j], virtual(Finch.Lookup)[i, j])                      )
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 =                           @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                            virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Step)[j], virtual(Finch.Lookup)[i, j])                          )
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                                                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Switch)[j], virtual(Finch.Lookup)[i, j])                              )
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Thunk)[j], virtual(Finch.Lookup)[i, j])                                  )
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Thunk)[j], virtual(Finch.Lookup)[i, j])                                  )
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Thunk)[j], virtual(Finch.Lookup)[i, j])                                  )
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Thunk)[j], virtual(Finch.Lookup)[i, j])                                  )
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Thunk)[j], virtual(Finch.Lookup)[i, j])                                  )
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 =                                       @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                        virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Spike)[j], virtual(Finch.Lookup)[i, j])                                      )
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                            virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                          )
                                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                            virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                          )
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                            virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Fill)[], virtual(Finch.Lookup)[i, j])                                          )
                                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                            virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                          )
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                                                                  begin
                                          end
                                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                            virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                          )
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 =                                       @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                        virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                      )
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 =                                       @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                        virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Thunk)[], virtual(Finch.Lookup)[i, j])                                      )
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q::Int64]
                                        res_4 =                                               @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Lookup)[i, j])                                              )
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 =                                               @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Lookup)[i, j])                                              )
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Thunk)[i])                                                  )
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Thunk)[i])                                                  )
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Thunk)[i])                                                  )
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape::Int64 + j_6
                                                res_5 =                                                       @∀ i = virtual(Finch.Extent)  (
                                                        virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Furlable)[i])                                                      )
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape::Int64 + j_6
                                                res_5 =                                                       @∀ i = virtual(Finch.Extent)  (
                                                        virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Furlable)[i])                                                      )
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 =                                                       @∀ i = virtual(Finch.Extent)  (
                                                        virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Furlable)[i])                                                      )
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 =                                                       @∀ i = virtual(Finch.Extent)  (
                                                        virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Furlable)[i])                                                      )
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 =                                                       @∀ i = virtual(Finch.Extent)  (
                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Thunk)[i])                                                      )
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q::Int64]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q::Int64 + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 =                                                               @∀ i = virtual(Finch.Extent)  (
                                                                virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Pipeline)[i])                                                              )
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q::Int64 + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 =                                                               @∀ i = virtual(Finch.Extent)  (
                                                                virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Pipeline)[i])                                                              )
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 =                                                               @∀ i = virtual(Finch.Extent)  (
                                                                virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Pipeline)[i])                                                              )
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Stepper)[i])                                                                      )
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Stepper)[i])                                                                      )
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Stepper)[i])                                                                      )
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Stepper)[i])                                                                      )
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Stepper)[i])                                                                      )
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                            virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Thunk)[i])                                                                          )
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                            virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Thunk)[i])                                                                          )
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                            virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Thunk)[i])                                                                          )
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 =                                                                               @∀ i = virtual(Finch.Extent)  (
                                                                                virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Step)[i])                                                                              )
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Switch)[i])                                                                                  )
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Thunk)[i])                                                                                      )
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Thunk)[i])                                                                                      )
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Thunk)[i])                                                                                      )
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Thunk)[i])                                                                                      )
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Thunk)[i])                                                                                      )
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 =                                                                                           @∀ i = virtual(Finch.Extent)  (
                                                                                            virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Spike)[i])                                                                                          )
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                                virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                              )
                                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                                virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                              )
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                                virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Fill)[])                                                                                              )
                                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                                virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                              )
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                                                                                                                          begin
                                                                                              end
                                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                                virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                              )
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 =                                                                                           @∀ i = virtual(Finch.Extent)  (
                                                                                            virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                          )
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 =                                                                                           @∀ i = virtual(Finch.Extent)  (
                                                                                            virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Thunk)[])                                                                                          )
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q::Int64]
                                                                                            res_9 =                                                                                                   @∀ i = virtual(Finch.Extent)  (
                                                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[])                                                                                                  )
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 =                                                                                                   @∀ i = virtual(Finch.Extent)  (
                                                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[])                                                                                                  )
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                                                                                                                          virtual(Finch.Thunk)[] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[])
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                                                                                                                          virtual(Finch.Thunk)[] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[])
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                                                                                                                          virtual(Finch.Thunk)[] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[])
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape::Int64 + i_6
                                                                                                    res_10 =                                                                                                           virtual(Finch.VirtualScalar)[] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[])
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape::Int64 + i_6
                                                                                                    res_10 =                                                                                                           virtual(Finch.VirtualScalar)[] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[])
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 =                                                                                                           virtual(Finch.VirtualScalar)[] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[])
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 =                                                                                                           virtual(Finch.VirtualScalar)[] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[])
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (virtual(Finch.VirtualScalar)[] = +(*(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[]), virtual(Finch.VirtualScalar)[]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q::Int64] = +(*(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[]), virtual(Finch.VirtualScalar)[]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = +(*(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[]), virtual(Finch.VirtualScalar)[]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)(*(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[]), virtual(Finch.VirtualScalar)[]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)(*(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[]), virtual(Finch.VirtualScalar)[]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[]), virtual(Finch.VirtualScalar)[]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(virtual(Finch.VirtualScalar)[], virtual(Finch.VirtualScalar)[]), virtual(Finch.VirtualScalar)[]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, virtual(Finch.VirtualScalar)[]), virtual(Finch.VirtualScalar)[]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), virtual(Finch.VirtualScalar)[]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q::Int64]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Fill)[])                                                                                      )
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                                                                                                          begin
                                                                                      end
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                                                                                  @∀ i = virtual(Finch.Extent)  (
                                                                    virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Phase)[i])                                                                  )
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                      )
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                      )
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                      )
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                      )
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Run)[i])                                                                      )
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                                                                                          @∀ i = virtual(Finch.Extent)  (
                                                                        virtual(Finch.Lookup)[i] <<+>>= *(virtual(Finch.VirtualScalar)[], virtual(Finch.Fill)[])                                                                      )
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                                                                                          begin
                                                                      end
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Fill)[], virtual(Finch.Lookup)[i, j])                                  )
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                                                                  begin
                                  end
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
                          @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Phase)[j], virtual(Finch.Lookup)[i, j])              )
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                  )
                j = phase_stop_6 + 1
            end
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                  )
                j = phase_stop_6 + 1
            end
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                  )
                j = phase_stop_6 + 1
            end
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                  )
                j = phase_stop_6 + 1
            end
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Run)[j], virtual(Finch.Lookup)[i, j])                  )
                j = phase_stop_6 + 1
            end
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                                  @∀ j = virtual(Finch.Extent) i = virtual(Finch.Extent)  (
                    virtual(Finch.Furlable)[i] <<+>>= *(virtual(Finch.Fill)[], virtual(Finch.Lookup)[i, j])                  )
                j = phase_stop_6 + 1
            end
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                                  begin
                  end
                j = phase_stop_6 + 1
            end
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                j = phase_stop_6 + 1
            end
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                j = phase_stop_6 + 1
            end
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                j = phase_stop_6 + 1
            end
        end
          begin
        @freeze(y)      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                j = phase_stop_6 + 1
            end
        end
          @freeze(y)
          begin
      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                j = phase_stop_6 + 1
            end
        end
          begin
      end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                j = phase_stop_6 + 1
            end
        end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                j = phase_stop_6 + 1
            end
        end
    qos = 1 * y_lvl.shape::Int64
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                j = phase_stop_6 + 1
            end
        end
    qos = 1 * y_lvl.shape
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                j = phase_stop_6 + 1
            end
        end
    qos = 1 * y_lvl.shape
    resize!(y_lvl_2.val, qos)
    (y = VirtualFiber(d(e(0.0))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                j = phase_stop_6 + 1
            end
        end
    qos = 1 * y_lvl.shape
    resize!(y_lvl_2.val, qos)
    (y = Fiber(VirtualDenseLevel(VirtualElementLevel(:y_lvl_2, Float64, 0.0), :y_lvl, Int64, value(y_lvl.shape, Int64))),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                j = phase_stop_6 + 1
            end
        end
    qos = 1 * y_lvl.shape
    resize!(y_lvl_2.val, qos)
    (y = Fiber((DenseLevel){Int64}(VirtualElementLevel(:y_lvl_2, Float64, 0.0), y_lvl.shape::Int64)),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                j = phase_stop_6 + 1
            end
        end
    qos = 1 * y_lvl.shape
    resize!(y_lvl_2.val, qos)
    (y = Fiber((DenseLevel){Int64}(y_lvl_2, y_lvl.shape::Int64)),)
end, quote
    y_lvl = ex.body.body.lhs.tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    A_lvl = (ex.body.body.rhs.args[1]).tns.tns.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_3 = A_lvl_2.lvl
    x_lvl = (ex.body.body.rhs.args[2]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl.shape == A_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(A_lvl_2.shape))"))
    A_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(A_lvl.shape) != $(x_lvl.shape))"))
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i = x_lvl.idx[x_lvl_q]
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i = 1
        x_lvl_i1 = 0
    end
    res = begin
            j = 1
            j_start = j
            if phase_stop >= phase_start
                j_4 = j
                while j <= phase_stop
                    j_start_2 = j
                    x_lvl_i = x_lvl.idx[x_lvl_q]
                    res_2 = begin
                            j_5 = j
                            if x_lvl_i == phase_stop_2
                                res_3 = begin
                                        x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                                        res_4 = begin
                                                j_6 = phase_stop_2
                                                A_lvl_q = (1 - 1) * A_lvl.shape + j_6
                                                res_5 = begin
                                                        A_lvl_2_q = A_lvl_2.ptr[A_lvl_q]
                                                        A_lvl_2_q_stop = A_lvl_2.ptr[A_lvl_q + 1]
                                                        if A_lvl_2_q < A_lvl_2_q_stop
                                                            A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                            A_lvl_2_i1 = A_lvl_2.idx[A_lvl_2_q_stop - 1]
                                                        else
                                                            A_lvl_2_i = 1
                                                            A_lvl_2_i1 = 0
                                                        end
                                                        res_6 = begin
                                                                i = 1
                                                                i_start = i
                                                                if phase_stop_3 >= phase_start_3
                                                                    i_4 = i
                                                                    while i <= phase_stop_3
                                                                        i_start_2 = i
                                                                        A_lvl_2_i = A_lvl_2.idx[A_lvl_2_q]
                                                                        res_7 = begin
                                                                                i_5 = i
                                                                                if A_lvl_2_i == phase_stop_4
                                                                                    res_8 = begin
                                                                                            A_lvl_3_val_2 = A_lvl_3.val[A_lvl_2_q]
                                                                                            res_9 = begin
                                                                                                    i_6 = phase_stop_4
                                                                                                    y_lvl_q = (1 - 1) * y_lvl.shape + i_6
                                                                                                    res_10 = (y_lvl_2.val[y_lvl_q] = (+)((*)(x_lvl_2_val_2, A_lvl_3_val_2), y_lvl_2.val[y_lvl_q]))
                                                                                                end
                                                                                        end
                                                                                    A_lvl_2_q += 1
                                                                                    res_8
                                                                                else
                                                                                end
                                                                                i = phase_stop_4 + 1
                                                                            end
                                                                    end
                                                                    i = phase_stop_3 + 1
                                                                end
                                                                i_start = i
                                                                if phase_stop_5 >= phase_start_5
                                                                    i_7 = i
                                                                    i = phase_stop_5 + 1
                                                                end
                                                            end
                                                    end
                                            end
                                    end
                                x_lvl_q += 1
                                res_3
                            else
                            end
                            j = phase_stop_2 + 1
                        end
                end
                j = phase_stop + 1
            end
            j_start = j
            if phase_stop_6 >= phase_start_6
                j_7 = j
                j = phase_stop_6 + 1
            end
        end
    qos = 1 * y_lvl.shape
    resize!(y_lvl_2.val, qos)
    (y = Fiber((DenseLevel){Int64}(y_lvl_2, y_lvl.shape)),)
end]
