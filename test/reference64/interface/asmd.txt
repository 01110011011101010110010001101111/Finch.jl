+,-, *, / tests
julia> A = Tensor(Dense(SparseList(Element(0.0))), [0.0 0.0 4.4; 1.1 0.0 0.0; 2.2 0.0 5.5; 3.3 0.0 0.0])
Dense [:,1:3]
├─ [:, 1]: SparseList (0.0) [1:4]
│  ├─ [2]: 1.1
│  ├─ [3]: 2.2
│  └─ [4]: 3.3
├─ [:, 2]: SparseList (0.0) [1:4]
└─ [:, 3]: SparseList (0.0) [1:4]
   ├─ [1]: 4.4
   └─ [3]: 5.5

julia> A + 1
SwizzleArray(Tensor(Dense{Int64}(Dense{Int64}(Element{1.0, Float64, Int64}([1.0, 2.1, 3.2, 4.3, 1.0, 1.0, 1.0, 1.0, 5.4, 1.0, 6.5, 1.0]), 4), 3)), (1, 2))
julia> 1 + A
SwizzleArray(Tensor(Dense{Int64}(Dense{Int64}(Element{1.0, Float64, Int64}([1.0, 2.1, 3.2, 4.3, 1.0, 1.0, 1.0, 1.0, 5.4, 1.0, 6.5, 1.0]), 4), 3)), (1, 2))
julia> A + A
SwizzleArray(Tensor(Dense{Int64}(Sparse{Int64}(Element{0.0, Float64, Int64}([2.2, 4.4, 6.6, 8.8, 11.0]), 4, Finch.DictTable{Int64, Int64, Vector{Int64}, Vector{Int64}, Vector{Int64}, Dict{Tuple{Int64, Int64}, Int64}}([1, 4, 4, 6], [2, 3, 4, 1, 3], [1, 2, 3, 4, 5], Dict((1, 2) => 1, (3, 1) => 4, (3, 3) => 5, (1, 3) => 2, (1, 4) => 3))), 3)), (1, 2))
julia> 2A
SwizzleArray(Tensor(Dense{Int64}(Sparse{Int64}(Element{0.0, Float64, Int64}([2.2, 4.4, 6.6, 8.8, 11.0]), 4, Finch.DictTable{Int64, Int64, Vector{Int64}, Vector{Int64}, Vector{Int64}, Dict{Tuple{Int64, Int64}, Int64}}([1, 4, 4, 6], [2, 3, 4, 1, 3], [1, 2, 3, 4, 5], Dict((1, 2) => 1, (3, 1) => 4, (3, 3) => 5, (1, 3) => 2, (1, 4) => 3))), 3)), (1, 2))
julia> A * 3
SwizzleArray(Tensor(Dense{Int64}(Sparse{Int64}(Element{0.0, Float64, Int64}([3.3000000000000003, 6.6000000000000005, 9.899999999999999, 13.200000000000001, 16.5]), 4, Finch.DictTable{Int64, Int64, Vector{Int64}, Vector{Int64}, Vector{Int64}, Dict{Tuple{Int64, Int64}, Int64}}([1, 4, 4, 6], [2, 3, 4, 1, 3], [1, 2, 3, 4, 5], Dict((1, 2) => 1, (3, 1) => 4, (3, 3) => 5, (1, 3) => 2, (1, 4) => 3))), 3)), (1, 2))
julia> A / 3
SwizzleArray(Tensor(Dense{Int64}(Sparse{Int64}(Element{0.0, Float64, Int64}([0.3666666666666667, 0.7333333333333334, 1.0999999999999999, 1.4666666666666668, 1.8333333333333333]), 4, Finch.DictTable{Int64, Int64, Vector{Int64}, Vector{Int64}, Vector{Int64}, Dict{Tuple{Int64, Int64}, Int64}}([1, 4, 4, 6], [2, 3, 4, 1, 3], [1, 2, 3, 4, 5], Dict((1, 2) => 1, (3, 1) => 4, (3, 3) => 5, (1, 3) => 2, (1, 4) => 3))), 3)), (1, 2))
julia> 3 / A
SwizzleArray(Tensor(Dense{Int64}(Dense{Int64}(Element{Inf, Float64, Int64}([Inf, 2.727272727272727, 1.3636363636363635, 0.9090909090909092, Inf, Inf, Inf, Inf, 0.6818181818181818, Inf, 0.5454545454545454, Inf]), 4), 3)), (1, 2))

