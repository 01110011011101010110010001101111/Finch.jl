julia> A = Tensor(Dense(SparseList(Element(0.0))), [0 0 3.3; 1.1 0 0; 2.2 0 4.4; 0 0 5.5])
4×3-Tensor
└─ Dense [:,1:3]
   ├─ [:, 1]: SparseList (0.0) [1:4]
   │  ├─ [2]: 1.1
   │  └─ [3]: 2.2
   ├─ [:, 2]: SparseList (0.0) [1:4]
   └─ [:, 3]: SparseList (0.0) [1:4]
      ├─ [1]: 3.3
      ├─ [3]: 4.4
      └─ [4]: 5.5

julia> B = Tensor(SparseDict(SparseDict(Element(0.0))))
0×0-Tensor
└─ Sparse (0.0) [:,1:0]

julia> @finch_code mode = :fast begin
        B .= 0
        for j = _
            for i = _
                B[j, i] = A[i, j]
            end
        end
    end
quote
    B_lvl = ((ex.bodies[1]).bodies[1]).tns.bind.lvl
    B_lvl_ptr = B_lvl.ptr
    B_lvl_idx = B_lvl.idx
    B_lvl_val = B_lvl.val
    B_lvl_tbl = B_lvl.tbl
    B_lvl_2 = B_lvl.lvl
    B_lvl_ptr_2 = B_lvl_2.ptr
    B_lvl_idx_2 = B_lvl_2.idx
    B_lvl_val_2 = B_lvl_2.val
    B_lvl_tbl_2 = B_lvl_2.tbl
    B_lvl_3 = B_lvl_2.lvl
    B_lvl_2_val = B_lvl_2.lvl.val
    A_lvl = ((ex.bodies[1]).bodies[2]).body.body.rhs.tns.bind.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_ptr = A_lvl_2.ptr
    A_lvl_idx = A_lvl_2.idx
    A_lvl_2_val = A_lvl_2.lvl.val
    resize!(B_lvl_ptr, 1 + 1)
    Finch.fill_range!(B_lvl_ptr, 0, 1 + 1, 1 + 1)
    empty!(B_lvl_tbl)
    B_lvl_qos_stop = 0
    resize!(B_lvl_ptr_2, 0 + 1)
    Finch.fill_range!(B_lvl_ptr_2, 0, 0 + 1, 0 + 1)
    empty!(B_lvl_tbl_2)
    B_lvl_qos_stop_2 = 0
    Finch.resize_if_smaller!(B_lvl_ptr, 1 + 1)
    Finch.fill_range!(B_lvl_ptr, 0, 1 + 1, 1 + 1)
    for j_4 = 1:A_lvl.shape
        A_lvl_q = (1 - 1) * A_lvl.shape + j_4
        A_lvl_2_q = A_lvl_ptr[A_lvl_q]
        A_lvl_2_q_stop = A_lvl_ptr[A_lvl_q + 1]
        if A_lvl_2_q < A_lvl_2_q_stop
            A_lvl_2_i1 = A_lvl_idx[A_lvl_2_q_stop - 1]
        else
            A_lvl_2_i1 = 0
        end
        phase_stop = min(A_lvl_2_i1, A_lvl_2.shape)
        if phase_stop >= 1
            if A_lvl_idx[A_lvl_2_q] < 1
                A_lvl_2_q = Finch.scansearch(A_lvl_idx, 1, A_lvl_2_q, A_lvl_2_q_stop - 1)
            end
            while true
                A_lvl_2_i = A_lvl_idx[A_lvl_2_q]
                if A_lvl_2_i < phase_stop
                    A_lvl_3_val = A_lvl_2_val[A_lvl_2_q]
                    B_lvl_qos = get(B_lvl_tbl, (1, A_lvl_2_i), length(B_lvl_tbl) + 1)
                    if B_lvl_qos > B_lvl_qos_stop
                        B_lvl_qos_stop = max(B_lvl_qos_stop << 1, 1)
                        Finch.resize_if_smaller!(B_lvl_ptr_2, B_lvl_qos_stop + 1)
                        Finch.fill_range!(B_lvl_ptr_2, 0, B_lvl_qos + 1, B_lvl_qos_stop + 1)
                    end
                    B_lvl_dirty = false
                    B_lvl_2_qos = get(B_lvl_tbl_2, (B_lvl_qos, j_4), length(B_lvl_tbl_2) + 1)
                    if B_lvl_2_qos > B_lvl_qos_stop_2
                        B_lvl_qos_stop_2 = max(B_lvl_qos_stop_2 << 1, 1)
                        Finch.resize_if_smaller!(B_lvl_2_val, B_lvl_qos_stop_2)
                        Finch.fill_range!(B_lvl_2_val, 0.0, B_lvl_2_qos, B_lvl_qos_stop_2)
                    end
                    B_lvl_2_val[B_lvl_2_qos] = A_lvl_3_val
                    if B_lvl_2_qos > length(B_lvl_tbl_2)
                        B_lvl_tbl_2[(B_lvl_qos, j_4)] = B_lvl_2_qos
                        B_lvl_ptr_2[B_lvl_qos + 1] += 1
                    end
                    B_lvl_dirty = true
                    if B_lvl_dirty
                        if B_lvl_qos > length(B_lvl_tbl)
                            B_lvl_tbl[(1, A_lvl_2_i)] = B_lvl_qos
                            B_lvl_ptr[1 + 1] += 1
                        end
                    end
                    A_lvl_2_q += 1
                else
                    phase_stop_3 = min(phase_stop, A_lvl_2_i)
                    if A_lvl_2_i == phase_stop_3
                        A_lvl_3_val = A_lvl_2_val[A_lvl_2_q]
                        B_lvl_qos = get(B_lvl_tbl, (1, phase_stop_3), length(B_lvl_tbl) + 1)
                        if B_lvl_qos > B_lvl_qos_stop
                            B_lvl_qos_stop = max(B_lvl_qos_stop << 1, 1)
                            Finch.resize_if_smaller!(B_lvl_ptr_2, B_lvl_qos_stop + 1)
                            Finch.fill_range!(B_lvl_ptr_2, 0, B_lvl_qos + 1, B_lvl_qos_stop + 1)
                        end
                        B_lvl_dirty = false
                        B_lvl_2_qos_2 = get(B_lvl_tbl_2, (B_lvl_qos, j_4), length(B_lvl_tbl_2) + 1)
                        if B_lvl_2_qos_2 > B_lvl_qos_stop_2
                            B_lvl_qos_stop_2 = max(B_lvl_qos_stop_2 << 1, 1)
                            Finch.resize_if_smaller!(B_lvl_2_val, B_lvl_qos_stop_2)
                            Finch.fill_range!(B_lvl_2_val, 0.0, B_lvl_2_qos_2, B_lvl_qos_stop_2)
                        end
                        B_lvl_2_val[B_lvl_2_qos_2] = A_lvl_3_val
                        if B_lvl_2_qos_2 > length(B_lvl_tbl_2)
                            B_lvl_tbl_2[(B_lvl_qos, j_4)] = B_lvl_2_qos_2
                            B_lvl_ptr_2[B_lvl_qos + 1] += 1
                        end
                        B_lvl_dirty = true
                        if B_lvl_dirty
                            if B_lvl_qos > length(B_lvl_tbl)
                                B_lvl_tbl[(1, phase_stop_3)] = B_lvl_qos
                                B_lvl_ptr[1 + 1] += 1
                            end
                        end
                        A_lvl_2_q += 1
                    end
                    break
                end
            end
        end
    end
    max_pos = maximum(B_lvl_ptr)
    resize!(B_lvl_ptr, 1 + 1)
    B_lvl_ptr[1] = 1
    for p_2 = 2:1 + 1
        B_lvl_ptr[p_2] += B_lvl_ptr[p_2 - 1]
    end
    resize!(B_lvl_idx, length(B_lvl_tbl))
    resize!(B_lvl_val, length(B_lvl_tbl))
    pos_pts = copy(B_lvl_ptr)
    for entry = pairs(B_lvl_tbl)
        sugar_2 = entry[1]
        p_2 = sugar_2[1]
        i_13 = sugar_2[2]
        v_8 = entry[2]
        pos = pos_pts[p_2]
        B_lvl_idx[pos] = i_13
        B_lvl_val[pos] = v_8
        pos_pts[p_2] += 1
    end
    perm_vec = Vector{Int64}(undef, max_pos)
    idx_temp = (typeof(B_lvl_idx))(undef, max_pos)
    val_temp = (typeof(B_lvl_val))(undef, max_pos)
    for p_2 = 1:1
        start = B_lvl_ptr[p_2]
        stop = B_lvl_ptr[p_2 + 1] - 1
        sortperm!(@view(perm_vec[1:(stop - start) + 1]), B_lvl_idx[start:stop])
        for i_13 = 1:(stop - start) + 1
            idx_temp[i_13] = B_lvl_idx[(start + perm_vec[i_13]) - 1]
            val_temp[i_13] = B_lvl_val[(start + perm_vec[i_13]) - 1]
        end
        for i_13 = 1:(stop - start) + 1
            B_lvl_idx[(start + i_13) - 1] = idx_temp[i_13]
            B_lvl_val[(start + i_13) - 1] = val_temp[i_13]
        end
    end
    qos_stop = B_lvl_ptr[1 + 1] - 1
    max_pos_2 = maximum(B_lvl_ptr_2)
    resize!(B_lvl_ptr_2, qos_stop + 1)
    B_lvl_ptr_2[1] = 1
    for p_4 = 2:qos_stop + 1
        B_lvl_ptr_2[p_4] += B_lvl_ptr_2[p_4 - 1]
    end
    resize!(B_lvl_idx_2, length(B_lvl_tbl_2))
    resize!(B_lvl_val_2, length(B_lvl_tbl_2))
    pos_pts_2 = copy(B_lvl_ptr_2)
    for entry = pairs(B_lvl_tbl_2)
        sugar_4 = entry[1]
        p_4 = sugar_4[1]
        i_14 = sugar_4[2]
        v_9 = entry[2]
        pos = pos_pts_2[p_4]
        B_lvl_idx_2[pos] = i_14
        B_lvl_val_2[pos] = v_9
        pos_pts_2[p_4] += 1
    end
    perm_vec_2 = Vector{Int64}(undef, max_pos_2)
    idx_temp_2 = (typeof(B_lvl_idx_2))(undef, max_pos_2)
    val_temp_2 = (typeof(B_lvl_val_2))(undef, max_pos_2)
    for p_4 = 1:qos_stop
        start_2 = B_lvl_ptr_2[p_4]
        stop_2 = B_lvl_ptr_2[p_4 + 1] - 1
        sortperm!(@view(perm_vec_2[1:(stop_2 - start_2) + 1]), B_lvl_idx_2[start_2:stop_2])
        for i_14 = 1:(stop_2 - start_2) + 1
            idx_temp_2[i_14] = B_lvl_idx_2[(start_2 + perm_vec_2[i_14]) - 1]
            val_temp_2[i_14] = B_lvl_val_2[(start_2 + perm_vec_2[i_14]) - 1]
        end
        for i_14 = 1:(stop_2 - start_2) + 1
            B_lvl_idx_2[(start_2 + i_14) - 1] = idx_temp_2[i_14]
            B_lvl_val_2[(start_2 + i_14) - 1] = val_temp_2[i_14]
        end
    end
    qos_stop_2 = B_lvl_ptr_2[qos_stop + 1] - 1
    resize!(B_lvl_2_val, qos_stop_2)
    (B = Tensor((SparseLevel){Int64}((SparseLevel){Int64}(B_lvl_3, A_lvl.shape, B_lvl_ptr_2, B_lvl_idx_2, B_lvl_val_2, B_lvl_tbl_2), A_lvl_2.shape, B_lvl_ptr, B_lvl_idx, B_lvl_val, B_lvl_tbl)),)
end
julia> @finch mode = :fast begin
        B .= 0
        for j = _
            for i = _
                B[j, i] = A[i, j]
            end
        end
    end
(B = Tensor(Sparse{Int64}(Sparse{Int64}(Element{0.0, Float64, Int64}([1.1, 2.2, 3.3, 4.4, 5.5]), 3, [1, 2, 4, 5, 6], [1, 1, 3, 3, 3], [1, 2, 4, 3, 5], Dict((1, 1) => 1, (3, 3) => 3, (2, 1) => 2, (4, 3) => 5, (2, 3) => 4)), 4, [1, 5], [1, 2, 3, 4], [3, 1, 2, 4], Dict((1, 2) => 1, (1, 1) => 3, (1, 3) => 2, (1, 4) => 4))),)

