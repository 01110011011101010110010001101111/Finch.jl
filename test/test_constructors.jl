@testset "constructors" begin
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{int}(0, Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.DenseLevel(0, Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{int}(0, Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(0, Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.DenseLevel{Int16}(0, Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{int, int}(0, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel(0, [1, 1], int[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int}(0, [1, 1], int[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int, int}(0, [1, 1], int[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int, int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, int}(0, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16}(0, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, int}(0, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(0, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(0, Int16[1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{int, int}(0, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel(0, [1, 1], int[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int}(0, [1, 1], int[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int, int}(0, [1, 1], int[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int, int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, int}(0, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16}(0, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, int}(0, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(0, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(0, Int16[1, 1], Int16[], Int16[1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{int, int}(0, [1, 0], [], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseBytemapLevel(0, [1, 0], Bool[], Tuple{int, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int}(0, [1, 0], Bool[], Tuple{int, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int, int}(0, [1, 0], Bool[], Tuple{int, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int, int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, int}(0, [1, 0], [], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseBytemapLevel{Int16}(0, [1, 0], Bool[], Tuple{int, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, int}(0, [1, 0], Bool[], Tuple{int, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int16}(0, [1, 0], [], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(0, Int16[1, 0], Bool[], Tuple{Int16, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.DenseLevel(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.DenseLevel{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{int, int}(4, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel(4, [1, 1], int[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int}(4, [1, 1], int[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int, int}(4, [1, 1], int[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int, int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, int}(4, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16}(4, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, int}(4, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(4, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(4, Int16[1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{int, int}(4, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel(4, [1, 1], int[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int}(4, [1, 1], int[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int, int}(4, [1, 1], int[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int, int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, int}(4, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16}(4, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, int}(4, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(4, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(4, Int16[1, 1], Int16[], Int16[1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{int, int}(4, [1, 0], [0, 0, 0, 0], [], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.SparseBytemapLevel(4, [1, 0], Bool[0, 0, 0, 0], Tuple{int, int}[], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int}(4, [1, 0], Bool[0, 0, 0, 0], Tuple{int, int}[], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int, int}(4, [1, 0], Bool[0, 0, 0, 0], Tuple{int, int}[], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int, int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, int}(4, [1, 0], [0, 0, 0, 0], [], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.SparseBytemapLevel{Int16}(4, [1, 0], Bool[0, 0, 0, 0], Tuple{int, Int16}[], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, int}(4, [1, 0], Bool[0, 0, 0, 0], Tuple{int, Int16}[], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int16}(4, [1, 0], [0, 0, 0, 0], [], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(4, Int16[1, 0], Bool[0, 0, 0, 0], Tuple{Int16, Int16}[], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{int}(6, Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.DenseLevel(6, Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{int}(6, Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(6, Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.DenseLevel{Int16}(6, Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{int, int}(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        res = Fiber(Finch.SparseListLevel(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int}(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int, int}(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, int}(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16}(6, [1, 3], Int16[2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, int}(6, [1, 3], Int16[2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(6, Int16[1, 3], Int16[2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{int, int}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int, int}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, int}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16}(6, [1, 3], Int16[2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, int}(6, [1, 3], Int16[2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(6, Int16[1, 3], Int16[2, 4], Int16[1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{int, int}(6, [1, 3], [0, 1, 0, 1, 0, 0], [(1, 2), (1, 4), (5, 4689045264)], Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.SparseBytemapLevel(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], [(1, 2), (1, 4), (5, 4689045264)], Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int}(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], [(1, 2), (1, 4), (5, 4689045264)], Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int, int}(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], [(1, 2), (1, 4), (5, 4689045264)], Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, int}(6, [1, 3], [0, 1, 0, 1, 0, 0], [(1, 2), (1, 4), (4593975952, 25680)], Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.SparseBytemapLevel{Int16}(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], Tuple{int, Int16}[(1, 2), (1, 4), (4593975952, 25680)], Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, int}(6, [1, 3], Bool[0, 1, 0, 1, 0, 0], Tuple{int, Int16}[(1, 2), (1, 4), (4593975952, 25680)], Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int16}(6, [1, 3], [0, 1, 0, 1, 0, 0], [(1, 2), (1, 4), (0, 0)], Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(6, Int16[1, 3], Bool[0, 1, 0, 1, 0, 0], Tuple{Int16, Int16}[(1, 2), (1, 4), (0, 0)], Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{int}(0, Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.DenseLevel(0, Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{int}(0, Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(0, Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.DenseLevel{Int16}(0, Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{int, int}(0, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel(0, [1, 1], int[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int}(0, [1, 1], int[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int, int}(0, [1, 1], int[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int, int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, int}(0, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16}(0, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, int}(0, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(0, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(0, Int16[1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{int, int}(0, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel(0, [1, 1], int[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int}(0, [1, 1], int[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int, int}(0, [1, 1], int[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int, int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, int}(0, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16}(0, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, int}(0, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(0, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(0, Int16[1, 1], Int16[], Int16[1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{int, int}(0, [1, 0], [], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseBytemapLevel(0, [1, 0], Bool[], Tuple{int, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int}(0, [1, 0], Bool[], Tuple{int, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int, int}(0, [1, 0], Bool[], Tuple{int, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int, int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, int}(0, [1, 0], [], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseBytemapLevel{Int16}(0, [1, 0], Bool[], Tuple{int, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, int}(0, [1, 0], Bool[], Tuple{int, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, int}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int16}(0, [1, 0], [], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(0, Int16[1, 0], Bool[], Tuple{Int16, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.DenseLevel(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.DenseLevel{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{int, int}(4, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel(4, [1, 1], int[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int}(4, [1, 1], int[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int, int}(4, [1, 1], int[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int, int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, int}(4, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16}(4, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, int}(4, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(4, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(4, Int16[1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{int, int}(4, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel(4, [1, 1], int[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int}(4, [1, 1], int[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int, int}(4, [1, 1], int[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int, int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, int}(4, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16}(4, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, int}(4, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, int}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(4, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(4, Int16[1, 1], Int16[], Int16[1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{int, int}(4, [1, 0], [0, 0, 0, 0], [], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.SparseBytemapLevel(4, [1, 0], Bool[0, 0, 0, 0], Tuple{int, int}[], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int}(4, [1, 0], Bool[0, 0, 0, 0], Tuple{int, int}[], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int, int}(4, [1, 0], Bool[0, 0, 0, 0], Tuple{int, int}[], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int, int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, int}(4, [1, 0], [0, 0, 0, 0], [], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.SparseBytemapLevel{Int16}(4, [1, 0], Bool[0, 0, 0, 0], Tuple{int, Int16}[], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, int}(4, [1, 0], Bool[0, 0, 0, 0], Tuple{int, Int16}[], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, int}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int16}(4, [1, 0], [0, 0, 0, 0], [], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(4, Int16[1, 0], Bool[0, 0, 0, 0], Tuple{Int16, Int16}[], Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{int}(6, Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.DenseLevel(6, Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{int}(6, Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(6, Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.DenseLevel{Int16}(6, Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{int, int}(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.SparseListLevel(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int}(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int, int}(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, int}(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16}(6, [1, 5], Int16[2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, int}(6, [1, 5], Int16[2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(6, Int16[1, 5], Int16[2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{int, int}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int, int}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, int}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16}(6, [1, 3], Int16[3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, int}(6, [1, 3], Int16[3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(6, Int16[1, 3], Int16[3, 6], Int16[1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{int, int}(6, [1, 5], [0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6), (4602177008, 4591731728)], Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.SparseBytemapLevel(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6), (4602177008, 4591731728)], Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int}(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6), (4602177008, 4591731728)], Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int, int}(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6), (4602177008, 4591731728)], Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, int}(6, [1, 5], [0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6), (4591735376, 28560)], Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.SparseBytemapLevel{Int16}(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], Tuple{int, Int16}[(1, 2), (1, 3), (1, 5), (1, 6), (4591735376, 28560)], Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, int}(6, [1, 5], Bool[0, 1, 1, 0, 1, 1], Tuple{int, Int16}[(1, 2), (1, 3), (1, 5), (1, 6), (4591735376, 28560)], Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int16}(6, [1, 5], [0, 1, 1, 0, 1, 1], [(1, 2), (1, 3), (1, 5), (1, 6), (-26620, 8)], Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(6, Int16[1, 5], Bool[0, 1, 1, 0, 1, 1], Tuple{Int16, Int16}[(1, 2), (1, 3), (1, 5), (1, 6), (-26620, 8)], Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{int, int}(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        res = Fiber(Finch.SparseListLevel(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int}(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{int, int}(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, int}(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16}(1111, [1, 5], Int16[2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, int}(1111, [1, 5], Int16[2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(1111, Int16[1, 5], Int16[2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{int, int}(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int}(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{int, int}(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, int}(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16}(1111, [1, 4], Int16[3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, int}(1111, [1, 4], Int16[3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(1111, Int16[1, 4], Int16[3, 555, 666], Int16[1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel constructors" begin
        ref = Fiber(SparseBytemap{int, int}(1111, [1, 5], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1, 2), (1, 3), (1, 555), (1, 666), (4733760544, 0)], Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.SparseBytemapLevel(1111, [1, 5], Bool[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1, 2), (1, 3), (1, 555), (1, 666), (4733760544, 0)], Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int}(1111, [1, 5], Bool[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1, 2), (1, 3), (1, 555), (1, 666), (4733760544, 0)], Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{int, int}(1111, [1, 5], Bool[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1, 2), (1, 3), (1, 555), (1, 666), (4733760544, 0)], Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, int}(1111, [1, 5], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1, 2), (1, 3), (1, 555), (1, 666), (4572490352, -12400)], Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.SparseBytemapLevel{Int16}(1111, [1, 5], Bool[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Tuple{int, Int16}[(1, 2), (1, 3), (1, 555), (1, 666), (4572490352, -12400)], Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseBytemapLevel{Int16, int}(1111, [1, 5], Bool[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Tuple{int, Int16}[(1, 2), (1, 3), (1, 555), (1, 666), (4572490352, -12400)], Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseBytemapLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseBytemap{Int16, Int16}(1111, [1, 5], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [(1, 2), (1, 3), (1, 555), (1, 666), (-26620, 8)], Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.SparseBytemapLevel{Int16, Int16}(1111, Int16[1, 5], Bool[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Tuple{Int16, Int16}[(1, 2), (1, 3), (1, 555), (1, 666), (-26620, 8)], Element{0.0, Float64}([0.0, 20.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5550.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{int}, int}((0,), (int[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1}((0,), (int[],), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{int}}((0,), (int[],), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{int}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, int}((0,), (Int16[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((0,), (Int16[],), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{int}, int}((0,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{int, Tuple{int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}((0,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}((0,), Dict{Tuple{int, Tuple{int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}((0,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}((0,), Dict{Tuple{int, Tuple{int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}((0,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}((0,), Dict{Tuple{int, Tuple{int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, int}((0,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Dict{Tuple{int, Tuple{Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}((0,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}((0,), Dict{Tuple{int, Tuple{Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}((0,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}((0,), Dict{Tuple{int, Tuple{Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{int, int}, int}((0, 0), (int[], int[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), (int[], int[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{int, int}}((0, 0), (int[], int[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{int, int}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{int, int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, int}((0, 0), (Int16[], Int16[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((0, 0), (Int16[], Int16[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{int, int}, int}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, int}((0, 0), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}((0, 0), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}((0, 0), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}((0, 0), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}((0, 0), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{int, int, int}, int}((0, 0, 0), (int[], int[], int[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), (int[], int[], int[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{int, int, int}}((0, 0, 0), (int[], int[], int[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{int, int, int}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{int, int, int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, int}((0, 0, 0), (Int16[], Int16[], Int16[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), (Int16[], Int16[], Int16[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{int, int, int}, int}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, int}((0, 0, 0), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}((0, 0, 0), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}((0, 0, 0), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}((0, 0, 0), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}((0, 0, 0), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{int}, int}((4,), (int[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1}((4,), (int[],), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{int}}((4,), (int[],), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{int}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, int}((4,), (Int16[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), (Int16[],), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{int}, int}((4,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{int, Tuple{int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}((4,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}((4,), Dict{Tuple{int, Tuple{int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}((4,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}((4,), Dict{Tuple{int, Tuple{int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}((4,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}((4,), Dict{Tuple{int, Tuple{int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, int}((4,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{int, Tuple{Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}((4,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}((4,), Dict{Tuple{int, Tuple{Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}((4,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}((4,), Dict{Tuple{int, Tuple{Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{int, int}, int}((2, 3), (int[], int[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), (int[], int[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{int, int}}((2, 3), (int[], int[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{int, int}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, int}((2, 3), (Int16[], Int16[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), (Int16[], Int16[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{int, int}, int}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, int}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{int, int, int}, int}((2, 3, 2), (int[], int[], int[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), (int[], int[], int[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{int, int, int}}((2, 3, 2), (int[], int[], int[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{int, int, int}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), (Int16[], Int16[], Int16[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), (Int16[], Int16[], Int16[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{int, int, int}, int}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{int}, int}((4,), (int[2], ), [1, 2], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseCooLevel{1}((4,), ([2],), [1, 2], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{int}}((4,), ([2],), [1, 2], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, int}((4,), (Int16[2], ), [1, 2], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), (Int16[2],), [1, 2], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{int}, int}((4,), Dict{Tuple{int, Tuple{int}}, int}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, int}((4,), Dict{Tuple{int, Tuple{Int16}}, int}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{int, Tuple{Int16}}, int}((1, (2,)) => 1), [1, 2], Pair{Tuple{int, Tuple{Int16}}, int}[(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}((4,), Dict{Tuple{int, Tuple{Int16}}, int}((1, (2,)) => 1), [1, 2], Pair{Tuple{int, Tuple{Int16}}, int}[(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}((4,), Dict{Tuple{int, Tuple{Int16}}, int}((1, (2,)) => 1), [1, 2], Pair{Tuple{int, Tuple{Int16}}, int}[(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{int, int}, int}((2, 3), (int[2], int[1], ), [1, 2], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), ([2], [1]), [1, 2], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{int, int}}((2, 3), ([2], [1]), [1, 2], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, int}((2, 3), (Int16[2], Int16[1], ), [1, 2], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), (Int16[2], Int16[1]), [1, 2], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{int, int}, int}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, int}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{int, int, int}, int}((2, 3, 2), (int[2, 3], int[2, 2], int[1, 2], ), [1, 3], Element{false, Bool}([1, 1])), Environment())
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{int, int, int}}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), (Int16[2, 3], Int16[2, 2], Int16[1, 2], ), [1, 3], Element{false, Bool}([1, 1])), Environment())
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), (Int16[2, 3], Int16[2, 2], Int16[1, 2]), [1, 3], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{int, int, int}, int}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{int}, int}((0,), (int[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1}((0,), (int[],), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{int}}((0,), (int[],), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{int}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, int}((0,), (Int16[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((0,), (Int16[],), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{int}, int}((0,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{int, Tuple{int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}((0,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}((0,), Dict{Tuple{int, Tuple{int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}((0,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}((0,), Dict{Tuple{int, Tuple{int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}((0,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}((0,), Dict{Tuple{int, Tuple{int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, int}((0,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Dict{Tuple{int, Tuple{Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}((0,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}((0,), Dict{Tuple{int, Tuple{Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}((0,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}((0,), Dict{Tuple{int, Tuple{Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{int, int}, int}((0, 0), (int[], int[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), (int[], int[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{int, int}}((0, 0), (int[], int[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{int, int}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{int, int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, int}((0, 0), (Int16[], Int16[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((0, 0), (Int16[], Int16[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{int, int}, int}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}((0, 0), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, int}((0, 0), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}((0, 0), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}((0, 0), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}((0, 0), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}((0, 0), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{int, int, int}, int}((0, 0, 0), (int[], int[], int[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), (int[], int[], int[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{int, int, int}}((0, 0, 0), (int[], int[], int[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{int, int, int}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{int, int, int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, int}((0, 0, 0), (Int16[], Int16[], Int16[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), (Int16[], Int16[], Int16[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{int, int, int}, int}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}((0, 0, 0), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, int}((0, 0, 0), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}((0, 0, 0), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}((0, 0, 0), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}((0, 0, 0), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}((0, 0, 0), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{int}, int}((4,), (int[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1}((4,), (int[],), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{int}}((4,), (int[],), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{int}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, int}((4,), (Int16[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), (Int16[],), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{int}, int}((4,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{int, Tuple{int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}((4,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}((4,), Dict{Tuple{int, Tuple{int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}((4,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}((4,), Dict{Tuple{int, Tuple{int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}((4,), Dict{Tuple{int, Tuple{int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}((4,), Dict{Tuple{int, Tuple{int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, int}((4,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{int, Tuple{Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}((4,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}((4,), Dict{Tuple{int, Tuple{Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}((4,), Dict{Tuple{int, Tuple{Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}((4,), Dict{Tuple{int, Tuple{Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{int, int}, int}((2, 3), (int[], int[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), (int[], int[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{int, int}}((2, 3), (int[], int[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{int, int}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, int}((2, 3), (Int16[], Int16[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), (Int16[], Int16[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{int, int}, int}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, int}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{int, int, int}, int}((2, 3, 2), (int[], int[], int[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), (int[], int[], int[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{int, int, int}}((2, 3, 2), (int[], int[], int[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{int, int, int}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), (Int16[], Int16[], Int16[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), (Int16[], Int16[], Int16[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{int, int, int}, int}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), [1, 1], Pair{Tuple{int, Tuple{int, int, int}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), [1, 1], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{int}, int}((4,), (int[2], ), [1, 2], Element{0.0, Float64}([2.0])), Environment())
        res = Fiber(Finch.SparseCooLevel{1}((4,), ([2],), [1, 2], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{int}}((4,), ([2],), [1, 2], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, int}((4,), (Int16[2], ), [1, 2], Element{0.0, Float64}([2.0])), Environment())
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), (Int16[2],), [1, 2], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{int}, int}((4,), Dict{Tuple{int, Tuple{int}}, int}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{int}, int, Dict{Tuple{int, Tuple{int}}, int}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, int}((4,), Dict{Tuple{int, Tuple{Int16}}, int}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{int, Tuple{Int16}}, int}((1, (2,)) => 1), [1, 2], Pair{Tuple{int, Tuple{Int16}}, int}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int}((4,), Dict{Tuple{int, Tuple{Int16}}, int}((1, (2,)) => 1), [1, 2], Pair{Tuple{int, Tuple{Int16}}, int}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, int, Dict{Tuple{int, Tuple{Int16}}, int}}((4,), Dict{Tuple{int, Tuple{Int16}}, int}((1, (2,)) => 1), [1, 2], Pair{Tuple{int, Tuple{Int16}}, int}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{int, int}, int}((2, 3), (int[2], int[1], ), [1, 2], Element{0.0, Float64}([3.0])), Environment())
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), ([2], [1]), [1, 2], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{int, int}}((2, 3), ([2], [1]), [1, 2], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, int}((2, 3), (Int16[2], Int16[1], ), [1, 2], Element{0.0, Float64}([3.0])), Environment())
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), (Int16[2], Int16[1]), [1, 2], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{int, int}, int}((2, 3), Dict{Tuple{int, Tuple{int, int}}, int}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{int, int}, int, Dict{Tuple{int, Tuple{int, int}}, int}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, int}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16}}, int}}((2, 3), Dict{Tuple{int, Tuple{Int16, Int16}}, int}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{int, Tuple{Int16, Int16}}, int}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{int, int, int}, int}((2, 3, 2), (int[2, 3], int[2, 2], int[1, 2], ), [1, 3], Element{0.0, Float64}([4.0, 5.0])), Environment())
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{int, int, int}}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), (Int16[2, 3], Int16[2, 2], Int16[1, 2], ), [1, 3], Element{0.0, Float64}([4.0, 5.0])), Environment())
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), (Int16[2, 3], Int16[2, 2], Int16[1, 2]), [1, 3], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{int, int, int}, int}((2, 3, 2), Dict{Tuple{int, Tuple{int, int, int}}, int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{int, int, int}, int, Dict{Tuple{int, Tuple{int, int, int}}, int}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, int, Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}}((2, 3, 2), Dict{Tuple{int, Tuple{Int16, Int16, Int16}}, int}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{int, Tuple{Int16, Int16, Int16}}, int}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0, Float64}([0.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0}([0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0, Any}([0.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Any}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0, Float64}([0.0]), Environment())
        res = Fiber(Finch.ElementLevel(0.0, [0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel(0.0))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0, Float64}([1.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0}([1.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([1.0]), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0, Any}([1.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[1.0]), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0, Float64}([1.0]), Environment())
        res = Fiber(Finch.ElementLevel(0.0, [1.0]), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0, Float64}([0.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0}([0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0, Any}([0.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Any}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0, Float64}([0.0]), Environment())
        res = Fiber(Finch.ElementLevel(0.0, [0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel(0.0))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0, Float64}([1.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0}([1.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([1.0]), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0, Any}([1.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[1.0]), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0, Float64}([1.0]), Environment())
        res = Fiber(Finch.ElementLevel(0.0, [1.0]), Environment())
        @test isstructequal(res, ref)
    end
end
