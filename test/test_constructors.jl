@testset "constructors" begin
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int64}(0, Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.DenseLevel(0, Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int64}(0, Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(0, Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.DenseLevel{Int16}(0, Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int64, Int64}(0, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel(0, [1, 1], Int64[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64}(0, [1, 1], Int64[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64, Int64}(0, [1, 1], Int64[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64, Int64}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64, Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int64}(0, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16}(0, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int64}(0, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int64}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(0, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(0, Int16[1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int64, Int64}(0, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel(0, [1, 1], Int64[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64}(0, [1, 1], Int64[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64, Int64}(0, [1, 1], Int64[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64, Int64}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64, Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int64}(0, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16}(0, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int64}(0, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int64}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(0, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(0, Int16[1, 1], Int16[], Int16[1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int64}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.DenseLevel(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int64}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.DenseLevel{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int64, Int64}(4, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel(4, [1, 1], Int64[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64}(4, [1, 1], Int64[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64, Int64}(4, [1, 1], Int64[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64, Int64}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int64}(4, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16}(4, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int64}(4, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int64}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(4, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(4, Int16[1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int64, Int64}(4, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel(4, [1, 1], Int64[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64}(4, [1, 1], Int64[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64, Int64}(4, [1, 1], Int64[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64, Int64}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int64}(4, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16}(4, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int64}(4, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int64}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(4, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(4, Int16[1, 1], Int16[], Int16[1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int64}(6, Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.DenseLevel(6, Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int64}(6, Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(6, Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.DenseLevel{Int16}(6, Element{0.0, Float64}([0.0, 1.0, 0.0, 1.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int64, Int64}(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        res = Fiber(Finch.SparseListLevel(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64}(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64, Int64}(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int64}(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16}(6, [1, 3], Int16[2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int64}(6, [1, 3], Int16[2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(6, [1, 3], [2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(6, Int16[1, 3], Int16[2, 4], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int64, Int64}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64, Int64}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int64}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16}(6, [1, 3], Int16[2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int64}(6, [1, 3], Int16[2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(6, [1, 3], [2, 4], [1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(6, Int16[1, 3], Int16[2, 4], Int16[1, 2, 3], Element{0.0, Float64}([1.0, 1.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int64}(0, Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.DenseLevel(0, Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int64}(0, Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(0, Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.DenseLevel{Int16}(0, Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int64, Int64}(0, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel(0, [1, 1], Int64[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64}(0, [1, 1], Int64[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64, Int64}(0, [1, 1], Int64[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64, Int64}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64, Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int64}(0, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16}(0, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int64}(0, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int64}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(0, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(0, Int16[1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int64, Int64}(0, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel(0, [1, 1], Int64[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64}(0, [1, 1], Int64[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64, Int64}(0, [1, 1], Int64[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64, Int64}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64, Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int64}(0, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16}(0, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int64}(0, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int64}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(0, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(0, Int16[1, 1], Int16[], Int16[1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(0, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int64}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.DenseLevel(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int64}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        res = Fiber(Finch.DenseLevel{Int16}(4, Element{0.0, Float64}([0.0, 0.0, 0.0, 0.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int64, Int64}(4, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel(4, [1, 1], Int64[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64}(4, [1, 1], Int64[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64, Int64}(4, [1, 1], Int64[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64, Int64}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int64}(4, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16}(4, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int64}(4, [1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int64}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(4, [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(4, Int16[1, 1], Int16[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int64, Int64}(4, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel(4, [1, 1], Int64[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64}(4, [1, 1], Int64[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64, Int64}(4, [1, 1], Int64[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64, Int64}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int64}(4, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16}(4, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int64}(4, [1, 1], Int16[], [1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int64}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(4, [1, 1], [], [1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(4, Int16[1, 1], Int16[], Int16[1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(4, Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel constructors" begin
        ref = Fiber(Dense{Int64}(6, Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.DenseLevel(6, Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.DenseLevel{Int64}(6, Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.DenseLevel{Int16} constructors" begin
        ref = Fiber(Dense{Int16}(6, Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.DenseLevel{Int16}(6, Element{0.0, Float64}([0.0, 2.0, 2.0, 0.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int64, Int64}(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.SparseListLevel(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64}(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64, Int64}(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int64}(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16}(6, [1, 5], Int16[2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int64}(6, [1, 5], Int16[2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(6, [1, 5], [2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(6, Int16[1, 5], Int16[2, 3, 5, 6], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int64, Int64}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64, Int64}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int64}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16}(6, [1, 3], Int16[3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int64}(6, [1, 3], Int16[3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(6, [1, 3], [3, 6], [1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(6, Int16[1, 3], Int16[3, 6], Int16[1, 3, 5], Element{0.0, Float64}([2.0, 2.0, 3.0, 3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel constructors" begin
        ref = Fiber(SparseList{Int64, Int64}(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        res = Fiber(Finch.SparseListLevel(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64}(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int64, Int64}(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int64}(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16}(1111, [1, 5], Int16[2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseListLevel{Int16, Int64}(1111, [1, 5], Int16[2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseListLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseList{Int16, Int16}(1111, [1, 5], [2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        res = Fiber(Finch.SparseListLevel{Int16, Int16}(1111, Int16[1, 5], Int16[2, 3, 555, 666], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel constructors" begin
        ref = Fiber(SparseVBL{Int64, Int64}(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64}(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int64, Int64}(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int64}(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16}(1111, [1, 4], Int16[3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseVBLLevel{Int16, Int64}(1111, [1, 4], Int16[3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseVBLLevel{Int16, Int16} constructors" begin
        ref = Fiber(SparseVBL{Int16, Int16}(1111, [1, 4], [3, 555, 666], [1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        res = Fiber(Finch.SparseVBLLevel{Int16, Int16}(1111, Int16[1, 4], Int16[3, 555, 666], Int16[1, 3, 4, 5], Element{0.0, Float64}([20.0, 30.0, 5550.0, 6660.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int64}, Int64}((0,), (Int64[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1}((0,), (Int64[],), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int64}}((0,), (Int64[],), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int64}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int64}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, Int64}((0,), (Int16[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((0,), (Int16[],), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int64}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}((0,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}((0,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int64, Int64}, Int64}((0, 0), (Int64[], Int64[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), (Int64[], Int64[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int64, Int64}}((0, 0), (Int64[], Int64[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int64, Int64}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int64, Int64}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, Int64}((0, 0), (Int16[], Int16[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((0, 0), (Int16[], Int16[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int64, Int64}, Int64}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int64}((0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}((0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}((0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}((0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}((0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int64, Int64, Int64}, Int64}((0, 0, 0), (Int64[], Int64[], Int64[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), (Int64[], Int64[], Int64[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int64, Int64, Int64}}((0, 0, 0), (Int64[], Int64[], Int64[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int64, Int64, Int64}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int64, Int64, Int64}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, Int64}((0, 0, 0), (Int16[], Int16[], Int16[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), (Int16[], Int16[], Int16[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int64, Int64, Int64}, Int64}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int64}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}(Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int64}, Int64}((4,), (Int64[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int64}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, Int64}((4,), (Int16[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), (Int16[],), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int64}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int64, Int64}, Int64}((2, 3), (Int64[], Int64[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), (Int64[], Int64[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int64, Int64}}((2, 3), (Int64[], Int64[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int64, Int64}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, Int64}((2, 3), (Int16[], Int16[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), (Int16[], Int16[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int64, Int64}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), (Int64[], Int64[], Int64[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), (Int64[], Int64[], Int64[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int64, Int64, Int64}}((2, 3, 2), (Int64[], Int64[], Int64[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int64, Int64, Int64}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), (Int16[], Int16[], Int16[], ), [1, 1], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), (Int16[], Int16[], Int16[]), [1, 1], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{false, Bool}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{false, Bool}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Element{false, Bool}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{false, Bool}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int64}, Int64}((4,), (Int64[2], ), [1, 2], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseCooLevel{1}((4,), ([2],), [1, 2], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([2],), [1, 2], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, Int64}((4,), (Int16[2], ), [1, 2], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), (Int16[2],), [1, 2], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int64}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int64, Int64}, Int64}((2, 3), (Int64[2], Int64[1], ), [1, 2], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), ([2], [1]), [1, 2], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int64, Int64}}((2, 3), ([2], [1]), [1, 2], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, Int64}((2, 3), (Int16[2], Int16[1], ), [1, 2], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), (Int16[2], Int16[1]), [1, 2], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int64, Int64}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{false, Bool}([1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), (Int64[2, 3], Int64[2, 2], Int64[1, 2], ), [1, 3], Element{false, Bool}([1, 1])), Environment())
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int64, Int64, Int64}}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), (Int16[2, 3], Int16[2, 2], Int16[1, 2], ), [1, 3], Element{false, Bool}([1, 1])), Environment())
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), (Int16[2, 3], Int16[2, 2], Int16[1, 2]), [1, 3], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{false, Bool}([1, 1])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int64}, Int64}((0,), (Int64[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1}((0,), (Int64[],), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int64}}((0,), (Int64[],), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int64}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int64}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, Int64}((0,), (Int16[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((0,), (Int16[],), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int64}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((0,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}((0,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}((0,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((0,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int64, Int64}, Int64}((0, 0), (Int64[], Int64[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), (Int64[], Int64[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int64, Int64}}((0, 0), (Int64[], Int64[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int64, Int64}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int64, Int64}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, Int64}((0, 0), (Int16[], Int16[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((0, 0), (Int16[], Int16[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int64, Int64}, Int64}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}((0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int64}((0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}((0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}((0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}((0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}((0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int64, Int64, Int64}, Int64}((0, 0, 0), (Int64[], Int64[], Int64[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), (Int64[], Int64[], Int64[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int64, Int64, Int64}}((0, 0, 0), (Int64[], Int64[], Int64[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int64, Int64, Int64}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int64, Int64, Int64}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, Int64}((0, 0, 0), (Int16[], Int16[], Int16[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), (Int16[], Int16[], Int16[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int64, Int64, Int64}, Int64}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int64}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}((0, 0, 0), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((0, 0, 0), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}(Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int64}, Int64}((4,), (Int64[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int64}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, Int64}((4,), (Int16[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), (Int16[],), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int64}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int64, Int64}, Int64}((2, 3), (Int64[], Int64[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), (Int64[], Int64[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int64, Int64}}((2, 3), (Int64[], Int64[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int64, Int64}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, Int64}((2, 3), (Int16[], Int16[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), (Int16[], Int16[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int64, Int64}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), (Int64[], Int64[], Int64[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), (Int64[], Int64[], Int64[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int64, Int64, Int64}}((2, 3, 2), (Int64[], Int64[], Int64[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int64, Int64, Int64}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), (Int16[], Int16[], Int16[], ), [1, 1], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), (Int16[], Int16[], Int16[]), [1, 1], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), [1, 1], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), [1, 1], [], Element{0.0, Float64}([])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Int16[1, 1], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[], Element{0.0, Float64}([])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}(), Element{0.0, Float64}([])))
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int64}, Int64}((4,), (Int64[2], ), [1, 2], Element{0.0, Float64}([2.0])), Environment())
        res = Fiber(Finch.SparseCooLevel{1}((4,), ([2],), [1, 2], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([2],), [1, 2], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseCoo{1, Tuple{Int16}, Int64}((4,), (Int16[2], ), [1, 2], Element{0.0, Float64}([2.0])), Environment())
        res = Fiber(Finch.SparseCooLevel{1, Tuple{Int16}}((4,), (Int16[2],), [1, 2], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int64}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64}}, Int64}}((4,), Dict((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16}}, Int64}}((4,), Dict{Tuple{Int64, Tuple{Int16}}, Int64}((1, (2,)) => 1), [1, 2], Pair{Tuple{Int64, Tuple{Int16}}, Int64}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{1, Tuple{Int16}, Int16}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), [1, 2], [(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{1, Tuple{Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16}}, Int16}}((4,), Dict{Tuple{Int16, Tuple{Int16}}, Int16}((1, (2,)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16}}, Int16}[(1, (2,)) => 1], Element{0.0, Float64}([2.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int64, Int64}, Int64}((2, 3), (Int64[2], Int64[1], ), [1, 2], Element{0.0, Float64}([3.0])), Environment())
        res = Fiber(Finch.SparseCooLevel{2}((2, 3), ([2], [1]), [1, 2], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int64, Int64}}((2, 3), ([2], [1]), [1, 2], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{2, Tuple{Int16, Int16}, Int64}((2, 3), (Int16[2], Int16[1], ), [1, 2], Element{0.0, Float64}([3.0])), Environment())
        res = Fiber(Finch.SparseCooLevel{2, Tuple{Int16, Int16}}((2, 3), (Int16[2], Int16[1]), [1, 2], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int64, Int64}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{2}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64}}, Int64}}((2, 3), Dict((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}}((2, 3), Dict{Tuple{Int64, Tuple{Int16, Int16}}, Int64}((1, (2, 1)) => 1), [1, 2], Pair{Tuple{Int64, Tuple{Int16, Int16}}, Int64}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{2, Tuple{Int16, Int16}, Int16}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), [1, 2], [(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{2, Tuple{Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}}((2, 3), Dict{Tuple{Int16, Tuple{Int16, Int16}}, Int16}((1, (2, 1)) => 1), Int16[1, 2], Pair{Tuple{Int16, Tuple{Int16, Int16}}, Int16}[(1, (2, 1)) => 1], Element{0.0, Float64}([3.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), (Int64[2, 3], Int64[2, 2], Int64[1, 2], ), [1, 3], Element{0.0, Float64}([4.0, 5.0])), Environment())
        res = Fiber(Finch.SparseCooLevel{3}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int64, Int64, Int64}}((2, 3, 2), ([2, 3], [2, 2], [1, 2]), [1, 3], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseCoo{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), (Int16[2, 3], Int16[2, 2], Int16[1, 2], ), [1, 3], Element{0.0, Float64}([4.0, 5.0])), Environment())
        res = Fiber(Finch.SparseCooLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), (Int16[2, 3], Int16[2, 2], Int16[1, 2]), [1, 3], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{3}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int64, Int64, Int64}, Int64, Dict{Tuple{Int64, Tuple{Int64, Int64, Int64}}, Int64}}((2, 3, 2), Dict((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int64, Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}}((2, 3, 2), Dict{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], Pair{Tuple{Int64, Tuple{Int16, Int16, Int16}}, Int64}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}} constructors" begin
        ref = Fiber(SparseHash{3, Tuple{Int16, Int16, Int16}, Int16}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), [1, 3], [(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        res = Fiber(Finch.SparseHashLevel{3, Tuple{Int16, Int16, Int16}, Int16, Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}}((2, 3, 2), Dict{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}((1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2), Int16[1, 3], Pair{Tuple{Int16, Tuple{Int16, Int16, Int16}}, Int16}[(1, (2, 2, 1)) => 1, (1, (3, 2, 2)) => 2], Element{0.0, Float64}([4.0, 5.0])), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0, Float64}([0.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0}([0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0, Any}([0.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Any}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0, Float64}([0.0]), Environment())
        res = Fiber(Finch.ElementLevel(0.0, [0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel(0.0))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0, Float64}([1.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0}([1.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([1.0]), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0, Any}([1.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[1.0]), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0, Float64}([1.0]), Environment())
        res = Fiber(Finch.ElementLevel(0.0, [1.0]), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0, Float64}([0.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0}([0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0}())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0, Any}([0.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Any}())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0, Float64}([0.0]), Environment())
        res = Fiber(Finch.ElementLevel(0.0, [0.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel(0.0))
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0} constructors" begin
        ref = Fiber(Element{0.0, Float64}([1.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0}([1.0]), Environment())
        @test isstructequal(res, ref)
        res = Fiber(Finch.ElementLevel{0.0, Float64}([1.0]), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel{0.0, Any} constructors" begin
        ref = Fiber(Element{0.0, Any}([1.0]), Environment())
        res = Fiber(Finch.ElementLevel{0.0, Any}(Any[1.0]), Environment())
        @test isstructequal(res, ref)
    end
    @testset "Finch.ElementLevel constructors" begin
        ref = Fiber(Element{0.0, Float64}([1.0]), Environment())
        res = Fiber(Finch.ElementLevel(0.0, [1.0]), Environment())
        @test isstructequal(res, ref)
    end
end
