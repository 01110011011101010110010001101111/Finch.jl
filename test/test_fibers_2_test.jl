res = Fiber(
    Finch.DenseLevel(
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(0, 
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(0, 
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(0, 
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(0, 
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(0, 
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(0, 
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(0, 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(0, [1, 1], Int64[], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(0, 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(0, [1, 1], Int64[], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(0, 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(0, Int8[1, 1], Int8[], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(0, 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(0, [1, 1], Int64[], [1], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(0, 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(0, [1, 1], Int64[], [1], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(0, 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(0, Int8[1, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((0,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((0,), (Int64[],), [1, 1], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((0,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((0,), (Int64[],), [1, 1], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((0,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((0,), (Int8[],), [1, 1], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((0,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((0,), (Int64[],), [1, 1], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((0,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((0,), (Int8[],), Int8[1, 1], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((0,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Pair{Tuple{Int64, Tuple{Int64}}}[], [1, 1], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((0,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Pair{Tuple{Int64, Tuple{Int64}}}[], [1, 1], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((0,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(), Pair{Tuple{Int64, Tuple{Int8}}}[], [1, 1], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((0,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Pair{Tuple{Int64, Tuple{Int64}}}[], [1, 1], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((0,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Pair{Tuple{Int8, Tuple{Int8}}}[], Int8[1, 1], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(0, 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(0, 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(0, 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(0, 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(0, 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(0, 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(0, Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(0, 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(0, [1, 1], Int64[], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(0, 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(0, [1, 1], Int64[], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(0, 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(0, Int8[1, 1], Int8[], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(0, 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(0, [1, 1], Int64[], [1], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(0, 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(0, [1, 1], Int64[], [1], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(0, 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(0, Int8[1, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((0,), 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((0,), (Int64[],), [1, 1], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((0,), 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((0,), (Int64[],), [1, 1], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((0,), 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((0,), (Int8[],), [1, 1], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((0,), 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((0,), (Int64[],), [1, 1], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((0,), 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((0,), (Int8[],), Int8[1, 1], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((0,), 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Pair{Tuple{Int64, Tuple{Int64}}}[], [1, 1], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((0,), 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Pair{Tuple{Int64, Tuple{Int64}}}[], [1, 1], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((0,), 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(), Pair{Tuple{Int64, Tuple{Int8}}}[], [1, 1], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((0,), 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Pair{Tuple{Int64, Tuple{Int64}}}[], [1, 1], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((0,), 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Pair{Tuple{Int8, Tuple{Int8}}}[], Int8[1, 1], 
    Finch.ElementLevel{false}(Bool[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [], [1, 1], Element{false}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(0, 
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(0, 
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(0, 
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(0, 
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(0, 
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(0, 
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(0, 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(0, [1, 1], Int64[], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(0, 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(0, [1, 1], Int64[], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(0, 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(0, Int8[1, 1], Int8[], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(0, 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(0, [1, 1], Int64[], [1], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(0, 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(0, [1, 1], Int64[], [1], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(0, 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(0, Int8[1, 1], Int8[], Int8[1], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((0,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((0,), (Int64[],), [1, 1], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((0,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((0,), (Int64[],), [1, 1], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((0,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((0,), (Int8[],), [1, 1], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((0,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((0,), (Int64[],), [1, 1], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((0,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((0,), (Int8[],), Int8[1, 1], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((0,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Pair{Tuple{Int64, Tuple{Int64}}}[], [1, 1], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((0,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Pair{Tuple{Int64, Tuple{Int64}}}[], [1, 1], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((0,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(), Pair{Tuple{Int64, Tuple{Int8}}}[], [1, 1], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((0,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Pair{Tuple{Int64, Tuple{Int64}}}[], [1, 1], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((0,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Pair{Tuple{Int8, Tuple{Int8}}}[], Int8[1, 1], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(0, 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(0, 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(0, 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(0, 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(0, 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(0, 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(0, Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(0, 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(0, [1, 1], Int64[], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(0, 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(0, [1, 1], Int64[], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(0, 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(0, Int8[1, 1], Int8[], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(0, [1, 1], [], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(0, 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(0, [1, 1], Int64[], [1], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(0, 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(0, [1, 1], Int64[], [1], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(0, 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(0, Int8[1, 1], Int8[], Int8[1], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(0, [1, 1], [], [1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((0,), 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((0,), (Int64[],), [1, 1], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((0,), 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((0,), (Int64[],), [1, 1], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((0,), 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((0,), (Int8[],), [1, 1], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((0,), 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((0,), (Int64[],), [1, 1], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((0,), 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((0,), (Int8[],), Int8[1, 1], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((0,), ([], ), [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((0,), 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Pair{Tuple{Int64, Tuple{Int64}}}[], [1, 1], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((0,), 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Pair{Tuple{Int64, Tuple{Int64}}}[], [1, 1], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((0,), 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(), Pair{Tuple{Int64, Tuple{Int8}}}[], [1, 1], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((0,), 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(), Pair{Tuple{Int64, Tuple{Int64}}}[], [1, 1], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((0,), 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(), Pair{Tuple{Int8, Tuple{Int8}}}[], Int8[1, 1], 
    Finch.ElementLevel{true}(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((0,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [], [1, 1], Element{true}([true, true, true, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(6, 
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(6, 
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(6, 
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(6, 
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(6, 
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(6, 
    Finch.ElementLevel{false}()))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(6, 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(6, [1, 3], [2, 4], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(6, 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(6, [1, 3], [2, 4], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(6, 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(6, Int8[1, 3], Int8[2, 4], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(6, 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(6, [1, 3], [2, 4], [1, 2, 3], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(6, 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(6, [1, 3], [2, 4], [1, 2, 3], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(6, 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(6, Int8[1, 3], Int8[2, 4], Int8[1, 2, 3], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((6,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((6,), ([2, 4],), [1, 3], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((6,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((6,), ([2, 4],), [1, 3], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((6,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((6,), (Int8[2, 4],), [1, 3], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((6,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((6,), ([2, 4],), [1, 3], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((6,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((6,), (Int8[2, 4],), Int8[1, 3], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((6,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((6,), Dict((1, (2,)) => 1, (1, (4,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((6,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((6,), Dict((1, (2,)) => 1, (1, (4,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((6,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 1, (1, (4,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((6,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((6,), Dict((1, (2,)) => 1, (1, (4,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((6,), 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 1, (1, (4,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (2,)) => 1, (1, (4,)) => 2], Int8[1, 3], 
    Finch.ElementLevel{false}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.ElementLevel{false}(Bool[0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(6, 
    Finch.ElementLevel{false}(Bool[0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(6, 
    Finch.ElementLevel{false}(Bool[0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}(Bool[0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(6, 
    Finch.ElementLevel{false}(Bool[0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(6, 
    Finch.ElementLevel{false}(Bool[0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}(Bool[0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(6, 
    Finch.ElementLevel{false}(Bool[0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(6, 
    Finch.ElementLevel{false}(Bool[0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(Dense(6, Element{false}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(6, 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(6, [1, 3], [2, 4], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(6, 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(6, [1, 3], [2, 4], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(6, 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(6, Int8[1, 3], Int8[2, 4], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseList(6, [1, 3], [2, 4], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(6, 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(6, [1, 3], [2, 4], [1, 2, 3], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(6, 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(6, [1, 3], [2, 4], [1, 2, 3], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(6, 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(6, Int8[1, 3], Int8[2, 4], Int8[1, 2, 3], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseVBL(6, [1, 3], [2, 4], [1, 2, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((6,), 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((6,), ([2, 4],), [1, 3], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((6,), 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((6,), ([2, 4],), [1, 3], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((6,), 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((6,), (Int8[2, 4],), [1, 3], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((6,), 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((6,), ([2, 4],), [1, 3], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((6,), 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((6,), (Int8[2, 4],), Int8[1, 3], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseCoo{1}((6,), ([2, 4], ), [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((6,), 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((6,), Dict((1, (2,)) => 1, (1, (4,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((6,), 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((6,), Dict((1, (2,)) => 1, (1, (4,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((6,), 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 1, (1, (4,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((6,), 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((6,), Dict((1, (2,)) => 1, (1, (4,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((6,), 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 1, (1, (4,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (2,)) => 1, (1, (4,)) => 2], Int8[1, 3], 
    Finch.ElementLevel{false}(Bool[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (2,)) => 1, (1, (4,)) => 2], [1, 3], Element{false}([true, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(6, 
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(6, 
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(6, 
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(6, 
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(6, 
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(6, 
    Finch.ElementLevel{true}()))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(6, 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(6, [1, 5], [1, 3, 5, 6], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(6, 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(6, [1, 5], [1, 3, 5, 6], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(6, 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(6, Int8[1, 5], Int8[1, 3, 5, 6], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(6, 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(6, [1, 4], [1, 3, 6, 0], [1, 2, 3, 5], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(6, 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(6, [1, 4], [1, 3, 6, 0], [1, 2, 3, 5], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(6, 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(6, Int8[1, 4], Int8[1, 3, 6, 0], Int8[1, 2, 3, 5], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((6,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((6,), ([1, 3, 5, 6],), [1, 5], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((6,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((6,), ([1, 3, 5, 6],), [1, 5], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((6,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((6,), (Int8[1, 3, 5, 6],), [1, 5], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((6,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((6,), ([1, 3, 5, 6],), [1, 5], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((6,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((6,), (Int8[1, 3, 5, 6],), Int8[1, 5], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((6,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((6,), Dict((1, (1,)) => 1, (1, (3,)) => 2, (1, (6,)) => 4, (1, (5,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, (1, (6,)) => 4], [1, 5], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((6,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((6,), Dict((1, (1,)) => 1, (1, (3,)) => 2, (1, (6,)) => 4, (1, (5,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, (1, (6,)) => 4], [1, 5], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((6,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2, (1, (6,)) => 4, (1, (5,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, (1, (6,)) => 4], [1, 5], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((6,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((6,), Dict((1, (1,)) => 1, (1, (3,)) => 2, (1, (6,)) => 4, (1, (5,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, (1, (6,)) => 4], [1, 5], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((6,), 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2, (1, (6,)) => 4, (1, (5,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, (1, (6,)) => 4], Int8[1, 5], 
    Finch.ElementLevel{true}()))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.ElementLevel{true}(Bool[0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(6, 
    Finch.ElementLevel{true}(Bool[0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(6, 
    Finch.ElementLevel{true}(Bool[0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{true}(Bool[0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(6, 
    Finch.ElementLevel{true}(Bool[0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(6, 
    Finch.ElementLevel{true}(Bool[0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{true}(Bool[0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(6, 
    Finch.ElementLevel{true}(Bool[0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(6, 
    Finch.ElementLevel{true}(Bool[0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(Dense(6, Element{true}([false, true, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(6, 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(6, [1, 5], [1, 3, 5, 6], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(6, 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(6, [1, 5], [1, 3, 5, 6], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(6, 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(6, Int8[1, 5], Int8[1, 3, 5, 6], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseList(6, [1, 5], [1, 3, 5, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(6, 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(6, [1, 4], [1, 3, 6, 0], [1, 2, 3, 5], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(6, 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(6, [1, 4], [1, 3, 6, 4427034800], [1, 2, 3, 5], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(6, 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(6, Int8[1, 4], Int8[1, 3, 6, 0], Int8[1, 2, 3, 5], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseVBL(6, [1, 4], [1, 3, 6, …], [1, 2, 3, …], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((6,), 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((6,), ([1, 3, 5, 6],), [1, 5], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((6,), 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((6,), ([1, 3, 5, 6],), [1, 5], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((6,), 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((6,), (Int8[1, 3, 5, 6],), [1, 5], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((6,), 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((6,), ([1, 3, 5, 6],), [1, 5], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((6,), 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((6,), (Int8[1, 3, 5, 6],), Int8[1, 5], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseCoo{1}((6,), ([1, 3, 5, …], ), [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((6,), 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((6,), Dict((1, (1,)) => 1, (1, (3,)) => 2, (1, (6,)) => 4, (1, (5,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, (1, (6,)) => 4], [1, 5], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((6,), 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((6,), Dict((1, (1,)) => 1, (1, (3,)) => 2, (1, (6,)) => 4, (1, (5,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, (1, (6,)) => 4], [1, 5], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((6,), 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2, (1, (6,)) => 4, (1, (5,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, (1, (6,)) => 4], [1, 5], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((6,), 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((6,), Dict((1, (1,)) => 1, (1, (3,)) => 2, (1, (6,)) => 4, (1, (5,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, (1, (6,)) => 4], [1, 5], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((6,), 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2, (1, (6,)) => 4, (1, (5,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, (1, (6,)) => 4], Int8[1, 5], 
    Finch.ElementLevel{true}(Bool[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 
)))
ref = Fiber(SparseHash{1}((6,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2, (1, (5,)) => 3, …], [1, 5], Element{true}([false, false, false, …])), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.DenseLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.DenseLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.DenseLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.DenseLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.DenseLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.DenseLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], Dense(4, Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 4585207856, 116], [1, 4], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4585207856, 116], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5461772432, 7827334352], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 3, 4585207856], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 6928861472, 2], [1, 4], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 6928861472, 2], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -75, 76], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -74, 76], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, -74, 76], Int8[1, 4], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -74, 76], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseListLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 1, 4614371504], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 7537907584, 1], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 0, 4567988944], [1, 4], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 7522322720, 2], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 50, 1], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 0, 4567988944], [1, 4], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -40, -87], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, -69, 9], Int8[1, 4], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -69, 9], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseListLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 19, 1], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4585204752, 91], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 1, 4564824528], [1, 4], 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 1, 4564824528], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4593062128, 8121720176], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4593062128, 8121720176], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 4593062128, 8121720176], [1, 4], 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4593062128, 8121720176], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -6, 69], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -72, 9], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, -37, 1], Int8[1, 4], 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -37, 1], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseListLevel(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseListLevel(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5439915440, 2], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 5443285520, 1], [1, 4], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5443285520, 1], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5444640432, 1], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5439915440, 1], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 5443285520, 1], [1, 4], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5443285520, 1], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, 0, 0], Int8[1, 4], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseListLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 0, 4567988944], [1, 4], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 0, 4567988944], [1, 4], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 101, 46], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, 3, -104], Int8[1, 4], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 3, -104], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseListLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 0, 4567988944], [1, 4], 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 0, 4567988944], [1, 4], 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, 0, 0], Int8[1, 4], 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseListLevel{Int64}(4, [1, 1, 5, 5], [1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseListLevel{Int64}(4, [1, 5, 5, 6], [1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5461772432, 5461772432], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 4585205616, 96], [1, 4], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4585205616, 96], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4868433392, 0], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4585209264, 1], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 5461772432, 5461772432], [1, 4], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5461772432, 5461772432], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 101, 46], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -69, 9], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, -92, -117], Int8[1, 4], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -92, -117], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseListLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5461772432, 7827334352], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5443285520, 1], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 7522322720, 2], [1, 4], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 7522322720, 2], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5439915440, 3], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5444640432, 1], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 5443285520, 1], [1, 4], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5443285520, 1], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -112, -60], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -42, 1], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, 0, 0], Int8[1, 4], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseListLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4868433392, 0], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 1, 4597077904], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 0, 4567988944], [1, 4], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 1, 4597077904], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 1, 4597077904], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 1, 4597077904], [1, 4], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 1, 4597077904], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -82, 76], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, 0, 0], Int8[1, 4], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 1, 5, 5], Int8[1, 2, 3, 4], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseList(4, [1, 1, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseListLevel{Int8}(4, Int8[1, 5, 5, 6], Int8[1, 2, 3, 4, 2], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseList(4, [1, 5, 5, …], [1, 2, 3, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 7827334352, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4868433392, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 48, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 5461772432, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4597078256, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4564822896, 3], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 41, 1], [1, 4], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 41, 1], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 7522322720, 2], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 1, 4597079440], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 5461772432, 7827334352], [1, 4], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5461772432, 7827334352], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, 0, 0], Int8[1, 4], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 7827334352, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4585202608, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 98, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseVBLLevel(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 70, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 5461772432, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 7537908064, 2], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4614370896, 5], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 5444890272, 2], [1, 4], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5444890272, 2], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5465938272, 2], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5439915440, 3], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 5439915440, 3], [1, 4], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5439915440, 3], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -6, 69], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, -91, 76], Int8[1, 4], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -91, 76], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 5461772432, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 75, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseVBLLevel(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 4567988944, 7, 4567988944], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 4868433392, 0, 4567988944], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4868433392, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 4868433392, 0, 4567988944], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4868433392, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 7827334352, 2, 4585203024], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 7827334352, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 2, 5461772432, 5461772432], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 4567988944, 7, 4597080144], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 4585203216, 77, 4868433392], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4585203216, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 2, 5461772432, 5461772432], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 4567988944, 7, 1], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 7455284672, 2], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 5439915440, 3], [1, 4], 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5439915440, 3], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 7439716032, 3], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4868433392, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 105, 2], [1, 4], 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 105, 2], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -53, -77], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, -40, -87], Int8[1, 4], 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -40, -87], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseVBLLevel(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 4585201808, 67, 2], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4585201808, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 1, 4597077296, 39], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 4567988944, 7, 2], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 7827334352, 1, 4614371120], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 7827334352, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 7827334352, 1, 4564824528], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 7827334352, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 7827334352, 1, 4614371504], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 7827334352, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 7827334352, 1, 4614371728], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 7827334352, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 3, 4585205616, 2], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 5461772432, 7827334352, 1], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 5461772432, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 2, 5461772432, 5461772432], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 2, 5461772432, 5461772432], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 2, 5461772432, 5461772432], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 2, 5461772432, 5461772432], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 3, 4585207536, 115], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseVBLLevel(4, [1, 2, 2, 3], [4, 2, 3, 4585209264, 125], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4585203216, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 7827334352, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4585203216, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 7827334352, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 7625539840, 1], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4868433392, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 16, 2], [1, 4], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 16, 2], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4585201456, 64], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4585203216, 78], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 4567988944, 7], [1, 4], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4567988944, 7], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -6, 69], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, -90, 76], Int8[1, 4], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -90, 76], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 5461772432, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 5461772432, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 5461772432, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 5461772432, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 33, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 7827334352, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseVBLLevel{Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 7827334352, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4585203216, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 7827334352, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4585203216, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 2, 4585203216], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5461772432, 7827334352], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 0, 4567988944], [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 113, 1], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 7604913184, 2], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 5461772432, 5461772432], [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5461772432, 5461772432], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, 0, 0], Int8[1, 4], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 7827334352, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4585203216, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseVBLLevel{Int64}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4585203216, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 4567988944, 7, 24], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 4585203216, 79, 4868433392], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4585203216, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 1, 4614372336, 28], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 7827334352, 3, 4585209264], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 7827334352, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 2, 5461772432, 5461772432], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 4567988944, 7, 2], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 4585203216, 79, 4868433392], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 4585203216, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 1, 4597076144, 29], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 7827334352, 1, 4564824528], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 7827334352, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 7593349280, 2], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4868433392, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 32, 2], [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 32, 2], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4585204336, 88], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5461772432, 5461772432], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 0, 4567988944], [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -92, -117], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, 30, -48], Int8[1, 4], 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 30, -48], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseVBLLevel{Int64}(4, [1, 1, 2, 1], Int64[], [1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 5461772432, 7827334352, 1], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 5461772432, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 5461772432, 7827334352, 1], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 5461772432, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 5461772432, 7827334352, 1], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 5461772432, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 5461772432, 7827334352, 1], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 5461772432, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 2, 4585203216, 79], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 1, 4597080144, 1], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 4567988944, 2, 5461772432], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 4567988944, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 69, 1, 4597076880], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 69, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 0, 4567988944, 7], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 2, 4585203216, 4868433392], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 5461772432, 7827334352, 2], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 5461772432, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 2, 4585203216, 79], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 2, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 8121720176, 4593062128, 8121720176], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 8121720176, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 8121720176, 4593062128, 8121720176], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 8121720176, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseVBLLevel{Int64}(4, [1, 2, 2, 3], [4, 2, 8121720176, 4593062128, 8121720176], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 8121720176, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, -117, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 76, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, -122, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 17, 2], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 5439915440, 2], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 2, 4585204752], [1, 4], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 2, 4585204752], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4585206256, 103], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 4868433392, 0], [1, 4], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4868433392, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, -48, 1], Int8[1, 4], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -48, 1], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 76, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 76, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 76, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 76, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 76, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 1, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 76, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 76, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 76, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 76, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseVBLLevel{Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, -48, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, -3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 76, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 71, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 98, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 4614371504, 14], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 0, 4567988944], [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 3, 4585207536], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 3, 4585207536], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 3, 4585207536], [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 3, 4585207536], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -14, 113], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -67, 76], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, -14, 113], Int8[1, 4], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, -14, 113], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, -77, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 76, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 107, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 76, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, -33, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, -19, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 113, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 76, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 21, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 37, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseVBLLevel{Int8}(4, 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 104, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 113, -69, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 113, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, -116, 69, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, -116, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, -48, 69, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, -48, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 0, 0, 0], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 0, 0, 0], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 0, 0, 0], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 62, -82, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 62, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 46, 34, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 46, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 121, 16, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseVBL(4, [1, 2, 2, …], [4, 2, 121, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 4], [1, 2, 3], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 4], Int8[1, 2, 3], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 4], [1, 2, 3], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 4567988944], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 80, 1], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 2], [3, 3, 4585207536], [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 3, 4585207536], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 53, 1], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 56, 1], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 2], [3, 59, 1], [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 59, 1], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 3, -104], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 89, -5], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 2], Int8[3, 0, 0], Int8[1, 4], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 2], [3, 0, 0], [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 2, 3],), [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 2, 3],), Int8[1, 4], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 1, 2, 1], Int8[], Int8[1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 2, 3], ), [1, 4], SparseVBL(4, [1, 1, 2, …], [], [1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 46, 34, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 46, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 69, 16, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 69, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 0, 0, 0], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 9, 19, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 9, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, -109, 35, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, -109, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, -13, 7, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, -13, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, -116, 69, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, -116, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 5, 39, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 5, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 0, 0, 0], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, -92, -73, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, -92, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 9, 19, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 9, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, -89, 38, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, -89, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 127, 34, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 127, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, 0, 0, 0], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, 0, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], Int8[1, 4], 
    Finch.SparseVBLLevel{Int8}(4, Int8[1, 2, 2, 3], Int8[4, 2, -87, 69, 1], Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3], [1, 4], SparseVBL(4, [1, 2, 2, …], [4, 2, -87, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseCooLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseCooLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseCooLevel{1}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseCooLevel{1}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}}((4,), (Int8[1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), (Int64[],), [1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((4,), ([1, 2, 3, 4, 2],), [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[],), Int8[1, 1, 1], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseCoo{1}((4,), ([], ), [1, 1, 1], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((4,), (Int8[1, 2, 3, 4, 2],), Int8[1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseCoo{1}((4,), ([1, 2, 3, …], ), [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseHashLevel{1}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseHashLevel{1}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseHashLevel{1}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseHashLevel{1}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseHashLevel{1}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseHashLevel{1}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((3, (2,)) => 5, (1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (3, (2,)) => 5], [1, 5, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((4,), Dict((1, (2,)) => 2, (1, (1,)) => 1, (1, (3,)) => 3, (2, (2,)) => 5, (1, (4,)) => 4), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, (1, (4,)) => 4, (2, (2,)) => 5], [1, 5, 6], 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, Int8[1, 3], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int64}(3, [1, 3], [1, 3], [1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseVBLLevel{Int8}(3, Int8[1, 3], Int8[1, 3], Int8[1, 2, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseVBL(3, [1, 3], [1, 3], [1, 2, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}}((3,), (Int8[1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int64}, Int64}((3,), ([1, 3],), [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseCooLevel{1, Tuple{Int8}, Int8}((3,), (Int8[1, 3],), Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseCoo{1}((3,), ([1, 3], ), [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int8}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int64}, Int64}((3,), Dict((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int64, Tuple{Int64}}}[(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int64, Tuple{Int64}}, Int64}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}((1, (1,)) => 1, (1, (3,)) => 2), Pair{Tuple{Int8, Tuple{Int8}}}[(1, (1,)) => 1, (1, (3,)) => 2], Int8[1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}(
    Finch.ElementLevel{false}())))
ref = Fiber(SparseHash{1}((3,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (3,)) => 2], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.DenseLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(Dense(3, SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 5, …], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int64}(3, [1, 3], [1, 3], 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
    Finch.SparseListLevel{Int8}(3, 
    Finch.SparseHashLevel{1, Tuple{Int8}, Int8}((4,), 
    Finch.ElementLevel{false}())))
ref = Fiber(SparseList(3, [1, 3], [1, 3], SparseHash{1}((4,), Dict{Tuple{Int8, Tuple{Int8}}, Int8}(…), [(1, (1,)) => 1, (1, (2,)) => 2, (1, (3,)) => 3, …], [1, 5, 6], Element{false}([true, true, true, …]))), Env(name=dst))
res = Fiber(
